{"version":3,"file":"static/webpack/static/development/pages/unzip-online.js.ec165f95fc8213d878af.hot-update.js","sources":["webpack:///./pages/unzip-online.tsx"],"sourcesContent":["import ConversionLayout from \"@components/ConversionLayout\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Pane } from \"evergreen-ui\";\nimport JSZip from \"jszip\";\nimport { useDropzone } from \"react-dropzone\";\nimport uniqBy from \"lodash/uniqBy\";\nimport { getDate } from \"@utils/utils\";\nimport { access } from \"fs\";\n\nexport default function() {\n  const controlProps = {\n    display: \"flex\",\n    flexDirection: \"row\" as any,\n    flex: \"0 0 5%\",\n    flexWrap: \"wrap\" as any,\n    height: \"100%\",\n    padding: \"0px\"\n  };\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    accept: \"application/zip\"\n  });\n  var zip = new JSZip();\n\n  const [accFiles, setAccFiles] = useState([]);\n\n\n  const files = accFiles.map((file: any) => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n  const saveImageTo = () => {\n    var zip = new JSZip();\n\n    const proList = accFiles.map(file => {\n      return new Promise(function(resolve) {\n        const reader = new FileReader();\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = () => {\n          //   console.info(reader.result);\n          zip.file(file.name, reader.result, { binary: true });\n          resolve();\n        };\n        reader.readAsBinaryString(file);\n      });\n    });\n    let time = getDate();\n    proList.push(\n      new Promise(function(resolve) {\n        zip.file(\n          \"readme.md\",\n          \"Thinks using \" + window.location.href + `\\n\\nGenerate at ${time}`\n        );\n        resolve();\n      })\n    );\n    Promise.all(proList).then(() => {\n      zip.generateAsync({ type: \"blob\" }).then(function(content) {\n        // see FileSaver.js\n        saveAs(content, `w3cubtools.genzip.${time}.zip`);\n      });\n    });\n  };\n\n  useEffect(() => {\n    zip.loadAsync(acceptedFiles[0])                            // 1) read the Blob\n    .then(function(zip) {\n        let acFiles = [];\n        zip.forEach(function (relativePath, zipEntry) {\n            console.info(relativePath, zipEntry);\n            acFiles.push(zipEntry);\n        })\n        setAccFiles(acFiles);\n        Object.keys(zip.files).forEach(function (filename) {\n            zip.files[filename].async('blob').then(function (fileData) {\n                console.log(fileData) // These are your file contents      \n            })\n        })\n\n        // setAccFiles(uniqBy([...accFiles, ...acceptedFiles], \"name\"));\n    })\n  }, [acceptedFiles]);\n  return (\n    <ConversionLayout flexDirection=\"column\" layoutHeight=\"auto\">\n      <div className=\"ibox-section\">\n        <section className=\"dragcontainer\">\n          <div\n            className=\"dropzone\"\n            {...getRootProps({ className: \"dropzone\" })}\n          >\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </div>\n          <aside>\n            <h4>Files</h4>\n            <ul>{files}</ul>\n          </aside>\n        </section>\n      </div>\n      <Pane {...controlProps}>\n        <Button\n          marginTop={20}\n          height={100}\n          width=\"100%\"\n          fontSize=\"30px\"\n          display=\"block\"\n          whiteSpace=\"nowrap\"\n          onClick={() => {\n            saveImageTo();\n          }}\n        >\n          Convert to Zip File\n        </Button>\n      </Pane>\n      <style jsx global>{`\n        .ibox-section {\n          padding: 16px;\n          border: 1px #e8e8e8 solid;\n          border-radius: 3px;\n          width: 100%;\n        }\n        .dragcontainer {\n          display: flex;\n          flex-direction: column;\n          font-family: sans-serif;\n        }\n\n        .dragcontainer > p {\n          font-size: 1rem;\n        }\n\n        .dragcontainer > em {\n          font-size: 0.8rem;\n        }\n\n        .dragcontainer .dropzone {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 70px;\n          border-width: 5px;\n          border-radius: 2px;\n          border-color: #eeeeee;\n          border-style: dashed;\n          background-color: #fafafa;\n          color: #bdbdbd;\n          outline: none;\n          transition: border 0.24s ease-in-out;\n        }\n\n        .dragcontainer .dropzone:focus {\n          border-color: #2196f3;\n        }\n\n        .dragcontainer .dropzone.disabled {\n          opacity: 0.6;\n        }\n      `}</style>\n    </ConversionLayout>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAFA;AAUA;AACA;AAFA;AATA;AAAA;AAAA;AACA;AAYA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AA8EA;;;;A","sourceRoot":""}