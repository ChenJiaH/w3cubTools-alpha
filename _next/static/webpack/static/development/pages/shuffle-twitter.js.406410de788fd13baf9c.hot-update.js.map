{"version":3,"file":"static/webpack/static/development/pages/shuffle-twitter.js.406410de788fd13baf9c.hot-update.js","sources":["webpack:///./components/ConversionLayout.tsx"],"sourcesContent":["//@ts-ignore\nimport { Pane, Alert, Textarea } from \"evergreen-ui\";\nimport EditorPanel, { EditorPanelProps } from \"@components/EditorPanel\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Language, useData } from \"@hooks/useData\";\nimport { useRouter } from \"next/router\";\nimport { activeRouteData } from \"@utils/routes\";\nimport Mdloader from \"@components/Mdloader\";\n\nfunction getEditorLanguage(lang: Language) {\n  const mapping = {\n    flow: \"typescript\"\n  };\n\n  return mapping[lang] || lang;\n}\n\nexport type Transformer = (args: {\n  value: string;\n  result?: string;\n  setValue: React.Dispatch<React.SetStateAction<string>>;\n  setResult: React.Dispatch<React.SetStateAction<string>>;\n}) => JSX.Element;\n\nexport interface ConversionLayoutProps {\n  splitTitle?: string;\n  splitLanguage?: Language;\n  editorTitle?: string;\n  editorLanguage?: Language;\n  defaultValue?: string;\n  resultTitle?: React.ReactNode;\n  resultLanguage?: Language;\n  splitEditorProps?: Partial<EditorPanelProps>;\n  splitEditorDefaultValue?: string;\n  editorProps?: Partial<EditorPanelProps>;\n  resultEditorProps?: Partial<EditorPanelProps>;\n  transformer?: Transformer;\n  resultRender?: Transformer;\n  defaultSplitValue?: string;\n  settings?: any;\n  flexDirection?: \"row\" | \"column\";\n  layoutHeight?: string;\n  children?: React.ReactNode;\n}\n\nconst ConversionPanel: React.FunctionComponent<\n  ConversionLayoutProps\n> = function({\n  // splitEditorProps,\n  // editorProps,\n  // resultEditorProps,\n  transformer,\n  resultRender,\n  // splitLanguage,\n  // splitTitle,\n  // editorLanguage,\n  // editorTitle,\n  // resultLanguage,\n  // resultTitle,\n  // settings,\n  flexDirection = \"row\",\n  layoutHeight = \"500px\",\n  defaultValue,\n  children\n  // splitEditorDefaultValue\n}) {\n  // const [value, setValue] = useData(editorDefaultValue || editorLanguage);\n  // const [splitValue, setSplitValue] = useData(\n  //   splitEditorDefaultValue || splitLanguage\n  // );\n\n  const [value, setValue] = useState(defaultValue);\n\n  const [result, setResult] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const router = useRouter();\n\n  //const route = activeRouteData(router.pathname);\n  // let packageDetails;\n\n  // if (route) {\n  //   const { packageUrl, packageName } = route;\n\n  //   packageDetails =\n  //     packageName && packageUrl\n  //       ? {\n  //           name: packageName,\n  //           url: packageUrl\n  //         }\n  //       : undefined;\n  // }\n\n  // useEffect(() => {\n  //   async function transform() {\n  //     try {\n  //       const result = await transformer({\n  //         value,\n  //         splitEditorValue: splitTitle ? splitValue : undefined\n  //       });\n\n  //       setResult(result);\n  //       setMessage(\"\");\n  //     } catch (e) {\n  //       setMessage(e.message);\n  //     }\n  //   }\n\n  //   transform();\n  // }, [splitValue, value, splitTitle, settings]);\n  const defFlexProps = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: \"1\",\n    flexWrap: \"wrap\",\n    height: layoutHeight\n  };\n  const defChildProps = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: \"1\",\n    flexWrap: \"wrap\",\n    height: \"100%\"\n  };\n  const defControlProps = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: \"0 0 5%\",\n    flexWrap: \"wrap\",\n    height: \"100%\",\n    padding: \"10px\"\n  };\n  let flexProps = {};\n  let controlProps = {};\n  let childProps = {};\n  if (flexDirection == \"column\") {\n    flexProps = {\n      ...defFlexProps,\n      flexDirection: \"column\"\n    };\n    childProps = {\n      ...defChildProps,\n      flexDirection: \"column\"\n    };\n    controlProps = {\n      ...defControlProps,\n      flexDirection: \"row\"\n    };\n  } else {\n    flexProps = {\n      ...defFlexProps,\n      flexDirection: \"row\"\n    };\n    childProps = {\n      ...defChildProps,\n      flexDirection: \"column\"\n    };\n    controlProps = {\n      ...defControlProps,\n      flexDirection: \"column\"\n    };\n  }\n\n  const resultSt = resultRender ? { border: \"2px solid #ccc\" } : {};\n  const resultOptions = { ...childProps };\n  return (\n    <>\n      <Pane {...flexProps}>\n        {!children && (\n          <>\n            <Pane {...childProps}>\n              <Textarea\n                height=\"100%\"\n                id=\"textarea-1\"\n                placeholder=\"typing your content\"\n                value={value}\n                onChange={e => setValue(e.target.value)}\n              />\n            </Pane>\n            <Pane {...controlProps}>\n              {transformer({\n                value,\n                result,\n                setValue,\n                setResult\n              })}\n            </Pane>\n            <Pane {...resultOptions} style={resultSt}>\n              {resultRender &&\n                resultRender({\n                  value,\n                  result,\n                  setValue,\n                  setResult\n                })}\n              {!resultRender && (\n                <Textarea\n                  height=\"100%\"\n                  id=\"textarea-2\"\n                  placeholder=\"get your result\"\n                  value={result}\n                  onChange={e => setResult(e.target.value)}\n                />\n              )}\n            </Pane>\n          </>\n        )}\n        {children && children}\n      </Pane>\n      <div className=\"clearfix\"></div>\n      <Mdloader />\n      {message && (\n        <Alert\n          paddingY={15}\n          paddingX={20}\n          left={240}\n          right={0}\n          position=\"absolute\"\n          intent=\"danger\"\n          bottom={0}\n          title={message}\n          backgroundColor=\"#FAE2E2\"\n          zIndex={3}\n        />\n      )}\n    </>\n  );\n};\n\nexport default React.memo(ConversionPanel);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AA6BA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AAEA;AAFA;AAIA;AAEA;AAFA;AAIA;AACA;AAEA;AAFA;AAIA;AAEA;AAFA;AAIA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;A","sourceRoot":""}