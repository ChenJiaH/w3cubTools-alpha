{"version":3,"file":"static/webpack/static/development/pages/vue-to-react.js.a90dd3d7e573c88e7d42.hot-update.js","sources":["webpack:///./pages/vue-to-react.tsx"],"sourcesContent":["import ConversionPanel from \"@components/ConversionPanel\";\nimport { EditorPanelProps } from \"@components/EditorPanel\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport { useCallback, useState } from \"react\";\nimport * as React from \"react\";\ninterface Settings {\n  auto: boolean;\n  sfc: boolean;\n}\n\nconst formFields = [\n  {\n    type: InputType.SWITCH,\n    key: \"auto\",\n    label: \"Auto detect Single File Components\"\n  },\n  {\n    type: InputType.SWITCH,\n    key: \"sfc\",\n    label: \"Is Single File Components\"\n  }\n];\nconst defValue = `\n&lt;template&gt;\n    &lt;div class=&quot;wrap&quot;&gt;\n         &lt;div&gt;time: {{time}}&lt;/div&gt;\n         &lt;p v-if=&quot;error&quot;&gt;some error happend&lt;/p&gt;\n         &lt;p v-else class=&quot;name&quot;&gt;your msg: {{msg}}&lt;/p&gt;\n         &lt;p v-show=&quot;msg&quot; class=&quot;shown&quot;&gt;test v-show&lt;/p&gt;\n         &lt;p v-on:click=&quot;clickMethod&quot;&gt;test v-on&lt;/p&gt;\n         &lt;img v-bind:src=&quot;imageSrc&quot; /&gt;\n         &lt;ul class=&quot;test-list&quot;&gt;\n             &lt;li v-for=&quot;(value, index) in list&quot; v-bind:key=&quot;index&quot; class=&quot;list-item&quot;&gt;\n                 &lt;div&gt;{{value}}&lt;/div&gt;\n                 &lt;span&gt;{{msg}}&lt;/span&gt;\n             &lt;/li&gt;\n         &lt;/ul&gt;\n         &lt;span v-text=&quot;text&quot;&gt;&lt;/span&gt;\n         &lt;div v-html=&quot;html&quot;&gt;&lt;/div&gt;\n         &lt;to-do v-bind:msg=&quot;msg&quot; v-bind:list=&quot;list&quot;&gt;&lt;/to-do&gt;\n         {{msg}}\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import &apos;./your.less&apos;;\n    import ToDo from &apos;./todo&apos;;\n    export default {\n        name: &apos;test-sfc&apos;,\n        props: {\n            msg: {\n                type: String,\n                default: &apos;hello, sfc&apos;\n            },\n            imageSrc: String\n        },\n\n        data () {\n            const now = Date.now();\n            return {\n                list: [1, 2, 3],\n                html: &apos;&lt;div&gt;1111&lt;span&gt;222&lt;/span&gt;333&lt;p&gt;ssssss&lt;/p&gt;&lt;/div&gt;&apos;,\n                error: false,\n                time: now\n            }\n        },\n\n        computed: {\n            text () {\n                console.log(&apos;from computed&apos;, this.msg);\n                return \\`\\${this.time}: \\${this.html}\\`;\n            }\n        },\n\n        components: {\n            ToDo\n        },\n\n        methods: {\n            clickMethod () {\n                console.log(&apos;click method&apos;);\n            },\n\n            testMethod () {\n                console.log(&apos;call test&apos;);\n            }\n        },\n\n        created () {\n            const prevTime = this.time;\n            this.testMethod();\n            const msg = &apos;this is a test msg&apos;;\n            this.time = Date.now();\n            console.log(&apos;mounted&apos;, msg, this.time);\n        },\n\n        errorCaptured () {\n            this.error = true;\n            this.time = Date.now();\n            console.log(&apos;errorCaptured&apos;, this.time);\n        }\n    }\n&lt;/script&gt;\n\n`\nexport default function() {\n  const name = \"Vue to React\";\n  const [settings, setSettings] = useSettings(name, {\n    auto: true,\n    sfc: false\n  });\n  const transformer = useCallback(\n    async ({ value }) => {\n      if (value) {\n        if (settings.auto) {\n          if (/\\<(script|template)\\>/g.test(value)) {\n            return _w3cub_vueToReact(value, true);\n          } else {\n            return _w3cub_vueToReact(value, false);\n          }\n        } else {\n          return _w3cub_vueToReact(value, settings.sfc);\n        }\n      }\n      return value;\n    },\n    [settings]\n  );\n  const getSettingsElement = useCallback<EditorPanelProps[\"settingElement\"]>(\n    ({ open, toggle }) => {\n      return (\n        <Form<Settings>\n          title=\"Vue to React\"\n          onSubmit={setSettings}\n          open={open}\n          toggle={toggle}\n          formsFields={formFields}\n          initialValues={settings}\n        />\n      );\n    },\n    []\n  );\n  return (\n    <ConversionPanel\n      layoutHeight=\"700px\"\n      transformer={transformer}\n      editorTitle=\"Vue\"\n      editorLanguage=\"html\"\n      editorDefaultValue={defValue}\n      editorSettingsElement={getSettingsElement}\n      settings={settings}\n      resultTitle=\"React\"\n      resultLanguage={\"javascript\"}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAmFA;AACA;AACA;AAFA;AAGA;AACA;AAFA;AAFA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;A","sourceRoot":""}