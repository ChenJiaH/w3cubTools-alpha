{"version":3,"file":"static/webpack/static/development/pages/image-to-text.js.0d21163d72c50e60358d.hot-update.js","sources":["webpack:///./components/image-to-text/tools/imageCreater.js"],"sourcesContent":["import GIF from \"gif.js\";\nimport { getImageType } from \"./imageCommon\";\nimport { FONT_HEIGHT, FONT_WIDTH } from \"./constant\";\n\n// pre标签下的字体\nconst TEXT_FONT = `normal normal 400 normal ${FONT_HEIGHT}px / ${FONT_HEIGHT}px monospace, monospace`;\nconst COLOR = {\n  BLACK: \"rgba(0,0,0,1)\",\n  WHITE: \"rgba(255,255,255,1)\"\n};\n\n/**\n * @typedef Frame\n * @prop {ImageData} data\n * @prop {string[]} text\n * @prop {number} delay\n */\n\n/**\n * 获取渲染了单帧图片的 canvas 对象\n *\n * @param {HTMLDivElement} div\n * @param {Frame} frame\n * @param {object} props\n * @returns\n */\nfunction getFrameCanvas(div, frame, props) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = div.scrollWidth;\n  canvas.height = div.scrollHeight;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = props.bgColor;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = props.color;\n  ctx.font = props.font;\n  for (let i = 0; i < frame.length; i++) {\n    for (let j = 0; j < frame[i].length; j++) {\n      ctx.fillText(frame[i][j], j * FONT_WIDTH, i * FONT_HEIGHT);\n    }\n  }\n  return canvas;\n}\n\nconst DEFAULT_GIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n};\n/**\n * 创建gif图片\n *\n * @param {HTMLDivElement} div\n * @param {Frame[]} frames\n * @param {object} props\n * @returns\n */\nfunction gif(div, frames, props, cb) {\n  props = Object.assign({}, DEFAULT_GIF_PROPS, props);\n  const width = div.scrollWidth;\n  const height = div.scrollHeight;\n  const gif = new GIF({\n    quality: 10,\n    workers: 2,\n    workerScript: \"/static/js/gif.worker.js\",\n    width,\n    height\n  });\n  gif.on(\"finished\", function(blob) {\n    cb(blob);\n  });\n  for (let i = 0; i < frames.length; i++) {\n    const canvas = getFrameCanvas(div, frames[i].text, props);\n    gif.addFrame(canvas, {\n      delay: frames[i].delay\n    });\n  }\n  gif.render();\n}\n\nconst DEFAULT_NOGIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n};\n/**\n * 创建非gif图片(jpg)\n *\n * @param {HTMLDivElement} div\n * @param {Frame} frame\n * @param {object} props\n * @returns\n */\nfunction noGif(div, frame, props) {\n  props = Object.assign({}, DEFAULT_NOGIF_PROPS, props);\n  const canvas = getFrameCanvas(div, frame.text, props);\n  return canvas.toDataURL(\"image/png\");\n}\n\n/**\n * 创建并下载新的图片\n *\n * @export\n * @param {object} option\n * @param {HTMLDivElement} option.div\n * @param {Frame[]} option.frames\n * @param {File} option.file\n */\nexport function createImage(option) {\n  const { div, frames, file, ...props } = option;\n  const type = getImageType(file.type);\n\n  const link = document.createElement(\"a\");\n  let filename = file.name.split(\".\");\n  filename[filename.length - 2] = filename[filename.length - 2] + \"-text\";\n  filename = filename.join(\".\");\n  link.download = filename;\n\n  if (type === \"GIF\") {\n    gif(div, frames, props, function(blob) {\n      const url = URL.createObjectURL(blob);\n      link.href = url;\n      link.click();\n      URL.revokeObjectURL(url);\n    });\n  } else {\n    link.href = noGif(div, frames[0], props);\n    link.click();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;AAOA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}