{"version":3,"file":"static/webpack/static/development/pages/unzip-online.js.475e3977b40f386e7812.hot-update.js","sources":["webpack:///./pages/unzip-online.tsx"],"sourcesContent":["import ConversionLayout from \"@components/ConversionLayout\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Pane, Checkbox } from \"evergreen-ui\";\nimport JSZip from \"jszip\";\nimport { useDropzone } from \"react-dropzone\";\nimport uniqBy from \"lodash/uniqBy\";\nimport { getDate } from \"@utils/utils\";\nimport { access } from \"fs\";\n\nexport default function() {\n  const controlProps = {\n    display: \"flex\",\n    flexDirection: \"row\" as any,\n    flex: \"0 0 5%\",\n    flexWrap: \"wrap\" as any,\n    height: \"100%\",\n    padding: \"0px\"\n  };\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    accept: \"application/zip\"\n  });\n  var zip = new JSZip();\n\n  const [accFiles, setAccFiles] = useState([]);\n\n  const setCheckState = (name, state) => {\n    let news = accFiles.map(item => {\n      if (item.name == name) {\n        item.checked = state;\n      }\n      return item;\n    });\n    setAccFiles(news);\n  };\n\n  const files = accFiles.map((file: any) => (\n    <li\n      key={file.name}\n      style={{ verticalAlign: \"top\", lineHeight: \"30px\", display: \"block\" }}\n    >\n      <Checkbox\n        checked={file.checked}\n        label={`${file.name} - ${file._data.uncompressedSize} bytes`}\n        onChange={e => setCheckState(file.name, e.target.checked)}\n      />\n    </li>\n  ));\n  const saveFileTo = () => {\n    accFiles\n      .filter(item => item.checked)\n      .forEach(function(item) {\n        let filename = item.name;\n        item.async(\"blob\").then(function(fileData) {\n          saveAs(fileData, filename);\n        });\n      });\n  };\n  useEffect(() => {\n    if (!acceptedFiles.length) {\n      return;\n    }\n    zip\n      .loadAsync(acceptedFiles[0], {\n        checkCRC32: true\n      }) // 1) read the Blob\n      .then(function(zip) {\n        let acFiles = [];\n        zip.forEach(function(_relativePath, zipEntry) {\n          if (zipEntry._data.uncompressedSize > 100) {\n            zipEntry.checked = true;\n          } else {\n            zipEntry.checked = false;\n          }\n          acFiles.push(zipEntry);\n        });\n        setAccFiles(acFiles);\n      });\n  }, [acceptedFiles]);\n  return (\n    <ConversionLayout flexDirection=\"column\" layoutHeight=\"auto\">\n      <div className=\"ibox-section\">\n        <section className=\"dragcontainer\">\n          <div\n            className=\"dropzone\"\n            {...getRootProps({ className: \"dropzone\" })}\n          >\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </div>\n          <aside>\n            <h4>Files</h4>\n            <ul>{files}</ul>\n          </aside>\n        </section>\n      </div>\n      <Pane {...controlProps}>\n        <Button\n          marginTop={20}\n          height={100}\n          width=\"100%\"\n          fontSize=\"30px\"\n          display=\"block\"\n          whiteSpace=\"nowrap\"\n          onClick={() => {\n            saveFileTo();\n          }}\n        >\n          Download selected unzip Files\n        </Button>\n      </Pane>\n      <style jsx global>{`\n        .ibox-section {\n          padding: 16px;\n          border: 1px #e8e8e8 solid;\n          border-radius: 3px;\n          width: 100%;\n        }\n        .dragcontainer {\n          display: flex;\n          flex-direction: column;\n          font-family: sans-serif;\n        }\n\n        .dragcontainer > p {\n          font-size: 1rem;\n        }\n\n        .dragcontainer > em {\n          font-size: 0.8rem;\n        }\n\n        .dragcontainer .dropzone {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 70px;\n          border-width: 5px;\n          border-radius: 2px;\n          border-color: #eeeeee;\n          border-style: dashed;\n          background-color: #fafafa;\n          color: #bdbdbd;\n          outline: none;\n          transition: border 0.24s ease-in-out;\n        }\n\n        .dragcontainer .dropzone:focus {\n          border-color: #2196f3;\n        }\n\n        .dragcontainer .dropzone.disabled {\n          opacity: 0.6;\n        }\n      `}</style>\n    </ConversionLayout>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAFA;AAUA;AACA;AAFA;AATA;AAAA;AAAA;AACA;AAYA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAWA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AA8EA;;;;A","sourceRoot":""}