{"version":3,"file":"static/webpack/static/development/pages/image-to-text.js.5bbe9d56b7825dea406c.hot-update.js","sources":["webpack:///./components/image-to-text/App.jsx"],"sourcesContent":["import React from \"react\";\nimport Divide from \"./component/Divide\";\n// import Button from './component/Button'\nimport { Button, TextInput, Alert } from \"evergreen-ui\";\nimport FramesModal from \"./component/FramesModal\";\nimport TransformSetting from \"./component/TransformSetting\";\nimport Row from \"./component/Row\";\nimport ImagePreviewUpload from \"./component/ImagePreviewUpload\";\nimport {\n  transformImageToText,\n  createGrayToTextFunc\n} from \"./tools/imageToText\";\nimport { getImageDatas } from \"./tools/imageParser\";\nimport { DEFAULT_AVAILABLE_TEXTS } from \"./tools/constant\";\nimport \"./style/index.less\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      transformWidth: \"\",\n      transformResult: [],\n      transformPlaceholder: DEFAULT_AVAILABLE_TEXTS,\n      rawImage: null,\n      file: null\n    };\n    this.imagePreview = React.createRef();\n    this.framesModal = React.createRef();\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({ rawImage, file });\n  };\n\n  setDemoImage = () => {\n    \n\n  };\n\n  setTransformType = ev => {\n    this.setState({\n      transformType: ev.target.value\n    });\n  };\n\n  setTransformPlaceholder = ev => {\n    this.setState({\n      transformPlaceholder: ev.target.value\n    });\n  };\n\n  setTransformWidth = ev => {\n    const value = ev.target.value;\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0;\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return;\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    });\n  };\n\n  rescale = () => {\n    if (!this.state.file) {\n      return;\n    }\n    this.imagePreview.current.scaleImageContainer();\n  };\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    const file = this.state.file;\n    if (!file) {\n      return;\n    }\n    this.setState({\n      isParsing: true\n    });\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage();\n    const framesData = getImageDatas(image, file);\n    framesData.forEach(frameData => {\n      frameData.text = transformImageToText(\n        frameData.data,\n        createGrayToTextFunc(\n          this.state.transformPlaceholder || DEFAULT_AVAILABLE_TEXTS\n        )\n      );\n    });\n    this.setState(\n      {\n        transformResult: framesData\n      },\n      () => {\n        this.framesModal.current.open();\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"imt-container\">\n        <header className=\"clear\">\n          <h1 className=\"text-center\">Image to Ascii Art(图片转字符画)</h1>\n        </header>\n        <Divide />\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting\n            label=\"Target image width:\"\n            labelFor=\"transform-size\"\n          >\n            <TextInput\n              type=\"number\"\n              id=\"transform-size\"\n              className=\"transform-size-input\"\n              name=\"transform-size\"\n              value={this.state.transformWidth}\n              onChange={this.setTransformWidth}\n            />\n          </TransformSetting>\n          <Button height={60} onClick={this.rescale}>\n            Rescale\n          </Button>\n          <TransformSetting\n            label=\"Conversion character:\"\n            labelFor=\"transform-placeholder\"\n          >\n            <TextInput\n              type=\"text\"\n              id=\"transform-placeholder\"\n              className=\"transform-placeholder-input\"\n              name=\"transform-placeholder\"\n              value={this.state.transformPlaceholder}\n              onChange={this.setTransformPlaceholder}\n            />\n          </TransformSetting>\n          <Button height={60} whiteSpace=\"nowrap\" onClick={this.transform}>\n            Start Convert\n          </Button>\n        </Row>\n        <Divide />\n        <Row>\n          <Button height={40} whiteSpace=\"nowrap\" onClick={this.transform}>\n            Demo Picture\n          </Button>\n          <ImagePreviewUpload\n            file={this.state.file}\n            image={this.state.rawImage}\n            setImageAndFile={this.setImageAndFile}\n            previewWidth={parseInt(this.state.transformWidth)}\n            ref={this.imagePreview}\n          ></ImagePreviewUpload>\n        </Row>\n        <FramesModal\n          ref={this.framesModal}\n          frames={this.state.transformResult}\n          file={this.state.file}\n        />\n        <Alert\n          intent=\"none\"\n          className=\"helps\"\n          title=\"When converting a GIF or a larger image, a certain amount of stagnation may occur, which is normal. Please wait patiently.\"\n          marginBottom={32}\n        />\n        {/* <p className=\"helps\"></p> */}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AACA;AADA;AAuBA;AACA;AADA;AAGA;AACA;AA3BA;AA6BA;AACA;AADA;AAGA;AACA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AA/CA;AAiDA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtDA;AA6DA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;;;AAGA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAAA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAxFA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAVA;AAWA;AACA;;;AA+EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAhKA;AACA;;;;;A","sourceRoot":""}