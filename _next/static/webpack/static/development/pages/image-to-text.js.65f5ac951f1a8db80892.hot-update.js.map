{"version":3,"file":"static/webpack/static/development/pages/image-to-text.js.65f5ac951f1a8db80892.hot-update.js","sources":["webpack:///./components/image-to-text/App.jsx"],"sourcesContent":["import React from 'react'\nimport Divide from './component/Divide'\n// import Button from './component/Button'\nimport { Button, TextInput, Alert } from \"evergreen-ui\";\nimport FramesModal from './component/FramesModal'\nimport TransformSetting from './component/TransformSetting'\nimport Row from './component/Row'\nimport ImagePreviewUpload from './component/ImagePreviewUpload'\nimport { transformImageToText, createGrayToTextFunc } from './tools/imageToText'\nimport { getImageDatas } from './tools/imageParser'\nimport { DEFAULT_AVAILABLE_TEXTS } from './tools/constant'\nimport './style/index.less';\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      transformWidth: '',\n      transformResult: [],\n      transformPlaceholder: DEFAULT_AVAILABLE_TEXTS,\n      rawImage: null,\n      file: null\n    }\n    this.imagePreview = React.createRef()\n    this.framesModal = React.createRef()\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({rawImage, file})\n  }\n\n  setTransformType = (ev) => {\n    this.setState({\n      transformType: ev.target.value\n    })\n  }\n\n  setTransformPlaceholder = (ev) => {\n    this.setState({\n      transformPlaceholder: ev.target.value\n    })\n  }\n\n  setTransformWidth = (ev) => {\n    const value = ev.target.value\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    })\n  }\n\n  rescale = () => {\n    if (!this.state.file) {\n      return\n    }\n    this.imagePreview.current.scaleImageContainer()\n  }\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    const file = this.state.file\n    if (!file) {\n      return\n    }\n    this.setState({\n      isParsing: true\n    })\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage()\n    const framesData = getImageDatas(image, file)\n    framesData.forEach(frameData => {\n      frameData.text = transformImageToText(frameData.data, createGrayToTextFunc(this.state.transformPlaceholder || DEFAULT_AVAILABLE_TEXTS))\n    })\n    this.setState({\n      transformResult: framesData\n    }, () => {\n      this.framesModal.current.open()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"imt-container\">\n        <header className=\"clear\">\n          <h1 className=\"text-center\">Image to Ascii Art(图片转字符画)</h1>\n        </header>\n        <Divide/>\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting label=\"Target image width:\" labelFor=\"transform-size\">\n            <TextInput type=\"number\"  id=\"transform-size\" className=\"transform-size-input\" name=\"transform-size\" value={this.state.transformWidth} onChange={this.setTransformWidth} />\n          </TransformSetting>\n          <Button height={60}  onClick={this.rescale}>Rescale</Button>\n          <TransformSetting label=\"Conversion character:\" labelFor=\"transform-placeholder\">\n            <TextInput type=\"text\" id=\"transform-placeholder\" className=\"transform-placeholder-input\" name=\"transform-placeholder\" value={this.state.transformPlaceholder} onChange={this.setTransformPlaceholder} />\n          </TransformSetting>\n          <Button height={60} whiteSpace=\"nowrap\" onClick={this.transform}>Start Convert</Button>\n        </Row>\n        <Divide/>\n        <Row>\n          <ImagePreviewUpload file={this.state.file} image={this.state.rawImage} setImageAndFile={this.setImageAndFile} previewWidth={parseInt(this.state.transformWidth)} ref={this.imagePreview}></ImagePreviewUpload>\n        </Row>\n        <FramesModal ref={this.framesModal} frames={this.state.transformResult} file={this.state.file} />\n        <Alert\n          intent=\"none\"\n          width=\"400\"\n          title=\"When converting a GIF or a larger image, a certain amount of stagnation may occur, which is normal. Please wait patiently.\"\n          marginBottom={32}\n        />\n        {/* <p className=\"helps\"></p> */}\n      </div>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAkBA;AACA;AADA;AAGA;AACA;AAtBA;AAwBA;AACA;AADA;AAGA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AA1CA;AA4CA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjDA;AAwDA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AA3EA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAVA;AAWA;AACA;;;AAksourceRoot":""}