{"version":3,"file":"static/webpack/static/development/pages/react-to-vue.js.10b18871c83eae427875.hot-update.js","sources":["webpack:///./components/ConversionPanel.tsx"],"sourcesContent":["import { Pane, Alert, Spinner } from \"evergreen-ui\";\nimport EditorPanel, { EditorPanelProps } from \"@components/EditorPanel\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Language, useData } from \"@hooks/useData\";\nimport { useRouter } from \"next/router\";\nimport { activeRouteData } from \"@utils/routes\";\nimport PrettierWorker from \"@workers/prettier.worker\";\nimport { getWorker } from \"@utils/workerWrapper\";\nimport Mdloader from \"@components/Mdloader\";\n\nlet prettierWorker;\n\nfunction getEditorLanguage(lang: Language) {\n  const mapping = {\n    flow: \"typescript\"\n  };\n\n  return mapping[lang] || lang;\n}\n\nexport type Transformer = (args: {\n  value: string;\n  splitEditorValue?: string;\n}) => Promise<string>;\n\nexport interface ConversionPanelProps {\n  splitTitle?: string;\n  splitLanguage?: Language;\n  editorTitle: string;\n  editorLanguage: Language;\n  editorDefaultValue?: string;\n  resultTitle: React.ReactNode;\n  resultLanguage: Language;\n  splitEditorProps?: Partial<EditorPanelProps>;\n  splitEditorDefaultValue?: string;\n  editorProps?: Partial<EditorPanelProps>;\n  resultEditorProps?: Partial<EditorPanelProps>;\n  transformer: Transformer;\n  defaultSplitValue?: string;\n  editorSettingsElement?: EditorPanelProps[\"settingElement\"];\n  resultSettingsElement?: EditorPanelProps[\"settingElement\"];\n  settings?: any;\n  layoutHeight?: string;\n}\n\nconst ConversionPanel: React.FunctionComponent<\n  ConversionPanelProps\n> = function({\n  splitEditorProps,\n  editorProps,\n  resultEditorProps,\n  transformer,\n  splitLanguage,\n  splitTitle,\n  editorLanguage,\n  editorTitle,\n  resultLanguage,\n  resultTitle,\n  editorSettingsElement,\n  settings,\n  editorDefaultValue,\n  splitEditorDefaultValue,\n  resultSettingsElement,\n  layoutHeight\n}) {\n  const [value, setValue] = useData(editorDefaultValue || editorLanguage);\n  const [splitValue, setSplitValue] = useData(\n    splitEditorDefaultValue || splitLanguage\n  );\n  const [result, setResult] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [showUpdateSpinner, toggleUpdateSpinner] = useState(false);\n\n  const router = useRouter();\n  const route = activeRouteData(router.pathname);\n\n  let packageDetails;\n\n  if (route) {\n    const { packageUrl, packageName } = route;\n\n    packageDetails =\n      packageName && packageUrl\n        ? {\n            name: packageName,\n            url: packageUrl\n          }\n        : undefined;\n  }\n\n  useEffect(() => {\n    async function transform() {\n      try {\n        toggleUpdateSpinner(true);\n        prettierWorker = prettierWorker || getWorker(PrettierWorker);\n\n        const result = await transformer({\n          value,\n          splitEditorValue: splitTitle ? splitValue : undefined\n        });\n\n        const prettyResult = await prettierWorker.send({\n          value: result,\n          language: resultLanguage\n        });\n        setResult(prettyResult);\n        setMessage(\"\");\n      } catch (e) {\n        console.log(e);\n        setMessage(e.message);\n      }\n      toggleUpdateSpinner(false);\n    }\n\n    transform();\n  }, [splitValue, value, splitTitle, settings]);\n\n  if (!layoutHeight) {\n    if (\n      splitTitle ||\n      (editorProps && editorProps.previewElement) ||\n      (resultEditorProps && resultEditorProps.previewElement)\n    ) {\n      layoutHeight = \"700px\";\n    } else {\n      layoutHeight = \"500px\";\n    }\n  }\n  return (\n    <>\n      <Pane\n        display=\"flex\"\n        flexDirection=\"row\"\n        overflow=\"hidden\"\n        flex={1}\n        height={layoutHeight}\n        css={{\n          border: \"1px solid #E4E7EB\"\n        }}\n      >\n        <Pane\n          display=\"flex\"\n          flex={1}\n          borderRight\n          flexDirection=\"column\"\n          overflow=\"hidden\"\n        >\n          <EditorPanel\n            language={getEditorLanguage(editorLanguage)}\n            onChange={setValue}\n            hasLoad\n            defaultValue={value}\n            id={1}\n            hasCopy={false}\n            title={editorTitle}\n            settingElement={editorSettingsElement}\n            hasClear\n            {...editorProps}\n          />\n\n          {splitTitle && (\n            <Pane display=\"flex\" flex={1} borderTop>\n              <EditorPanel\n                title={splitTitle}\n                defaultValue={splitValue}\n                language={getEditorLanguage(splitLanguage)}\n                id={2}\n                hasCopy={false}\n                onChange={setSplitValue}\n                hasLoad\n                hasClear\n                {...splitEditorProps}\n              />\n            </Pane>\n          )}\n        </Pane>\n        <Pane display=\"flex\" flex={1} position=\"relative\">\n          {showUpdateSpinner && (\n            <Pane\n              display=\"inline-flex\"\n              position=\"absolute\"\n              backgroundColor=\"#fff\"\n              zIndex={9}\n              borderRadius={\"50%\"}\n              paddingX={8}\n              paddingY={8}\n              elevation={1}\n              top={50}\n              right={30}\n            >\n              <Spinner\n                css={{\n                  \"& circle\": {\n                    stroke: \"#0e7ccf\"\n                  }\n                }}\n                size={32}\n              />\n            </Pane>\n          )}\n          <EditorPanel\n            title={resultTitle}\n            defaultValue={result}\n            language={getEditorLanguage(resultLanguage)}\n            id={3}\n            editable={false}\n            hasPrettier={false}\n            settingElement={resultSettingsElement}\n            packageDetails={packageDetails}\n            {...resultEditorProps}\n          />\n        </Pane>\n      </Pane>\n      <div className=\"clearfix\"></div>\n      <Mdloader />\n\n      {message && (\n        <Alert\n          paddingY={15}\n          paddingX={20}\n          left={240}\n          right={0}\n          position=\"absolute\"\n          intent=\"danger\"\n          bottom={0}\n          title={message}\n          backgroundColor=\"#FAE2E2\"\n          zIndex={3}\n        />\n      )}\n    </>\n  );\n};\n\nexport default React.memo(ConversionPanel);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AA0BA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AAWA;AACA;AAFA;AACA;AAXA;AAUA;AAIA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AACA;AAnBA;AAoBA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AADA;AADA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;A","sourceRoot":""}