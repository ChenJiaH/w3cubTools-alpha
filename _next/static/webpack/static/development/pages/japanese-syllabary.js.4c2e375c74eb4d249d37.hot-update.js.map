{"version":3,"file":"static/webpack/static/development/pages/japanese-syllabary.js.4c2e375c74eb4d249d37.hot-update.js","sources":["webpack:///./pages/japanese-syllabary.tsx"],"sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useReducer,\n  useLayoutEffect\n} from \"react\";\nimport { Pane, Tablist, Tab, Paragraph, Text } from \"evergreen-ui\";\nimport WriteCharactorSearch from \"@components/WriteCharactor/WriteCharactorSearch\";\n// import chinese from \"@constants/chinese.json\";\nimport { converttoNoTone } from \"@utils/utils\";\nimport VoiceComponent from \"@components/icons/VoiceComponent\";\nlet time = 0;\nlet reqFrame;\nlet paths = [];\nconst BOARD_CELL_SIZE = 298;\nconst BOARD_SIZE = 3;\nconst PADDING = 2;\nconst LAYOUT_SIZE = 600;\nconst commonWords = ``;\n\n\nconst chinese = {\n  \"あ\":[[[108,116],[498,136]],[[294,20],[290,402],[364,504]],[[448,206],[298,460],[164,480],[106,408],[172,298],[364,278],[480,344],[496,448],[456,500]]],\"い\":[[[112,126],[86,426],[134,518],[188,486]],[[426,132],[462,342],[416,434]]],\"う\":[[[204,70],[374,90]],[[146,242],[334,210],[412,278],[396,422],[270,550]]],\"え\":[[[280,38],[324,76]],[[124,210],[416,200],[102,526],[256,410],[376,536],[520,504]]],\"お\":[[[128,188],[480,196]],[[296,70],[318,258],[280,398],[210,494],[128,456],[202,322],[384,322],[444,446],[378,514]],[[446,98],[506,178]]],\"か\":[[[100,206],[274,198],[354,278],[346,436],[278,512],[250,486]],[[304,74],[144,360]],[[432,158],[500,320]]],\"き\":[[[154,156],[410,160]],[[180,300],[442,316]],[[258,54],[308,374]],[[162,410],[208,494],[320,534]]],\"く\":[[[382,86],[140,336],[380,538]]],\"け\":[[[132,112],[92,502],[198,502]],[[306,218],[594,196]],[[436,54],[456,292],[358,502]]],\"こ\":[[[112,166],[376,134],[464,164],[450,216]],[[142,456],[262,502],[464,458]]],\"さ\":[[[134,178],[508,162]],[[294,74],[364,328]],[[176,334],[246,438],[356,488]]],\"し\":[[[160,72],[170,454],[366,524],[456,416]]],\"す\":[[[116,198],[468,184]],[[322,74],[350,256],[300,374],[256,386],[232,308],[294,274],[324,336],[246,530]]],\"せ\":[[[70,228],[510,194]],[[428,92],[390,294]],[[234,84],[176,204],[192,398],[266,450],[446,462]]],\"そ\":[[[132,62],[270,142]],[[446,72],[184,176],[132,258],[146,308],[460,316],[308,328],[258,388],[292,492],[412,538]]],\"た\":[[[108,190],[270,168]],[[206,60],[180,302],[96,510]],[[288,302],[356,266],[450,292]],[[292,438],[456,464]]],\"ち\":[[[126,202],[438,150]],[[300,48],[202,348],[356,292],[422,430],[366,524],[242,524]]],\"つ\":[[[108,296],[306,202],[450,216],[472,330],[356,420]]],\"て\":[[[122,190],[452,152],[292,296],[296,450],[390,524]]],\"と\":[[[146,164],[236,270]],[[420,152],[206,292],[168,430],[236,520],[426,528]]],\"な\":[[[74,228],[314,176]],[[216,52],[74,362]],[[386,116],[512,272]],[[296,284],[292,486],[240,528],[164,506],[160,442],[216,430],[468,524]]],\"に\":[[[134,150],[130,502],[182,460]],[[310,212],[446,228]],[[318,438],[370,472],[486,450]]],\"ぬ\":[[[172,112],[194,306],[284,486]],[[366,142],[236,434],[168,482],[122,460],[156,306],[314,232],[422,292],[450,366],[426,446],[340,446],[382,386],[498,498]]],\"ね\":[[[168,104],[152,546]],[[120,182],[210,152],[90,472],[236,212],[360,156],[434,232],[450,348],[386,472],[132,450],[392,392],[502,502]]],\"の\":[[[302,246],[236,510],[160,456],[194,242],[392,168],[490,330],[412,510]]],\"は\":[[[122,150],[126,536]],[[272,270],[450,228]],[[340,130],[340,420],[296,494],[242,464],[250,412],[322,408],[464,494]]],\"ひ\":[[[78,284],[242,176],[194,382],[262,536],[390,482],[450,240],[532,296]]],\"ふ\":[[[284,112],[386,176]],[[276,246],[392,356],[374,460],[300,520]],[[202,382],[120,502]],[[476,382],[562,502]]],\"へ\":[[[104,412],[228,206],[512,422]]],\"ほ\":[[[138,142],[138,464],[202,430]],[[314,168],[452,138]],[[288,284],[480,258]],[[386,176],[378,420],[348,456],[306,412],[352,360],[506,450]]],\"ま\":[[[182,156],[422,130]],[[176,258],[408,246]],[[292,48],[276,408],[206,482],[130,450],[146,400],[250,386],[404,456]]],\"み\":[[[130,180],[220,182],[258,280],[236,420],[142,460],[126,374],[198,322],[494,296]],[[392,152],[392,434]]],\"む\":[[[108,202],[270,168]],[[210,92],[202,318],[176,344],[146,292],[212,246],[224,456],[370,510],[472,482],[476,438]],[[438,194],[490,296]]],\"め\":[[[202,130],[240,374],[306,486]],[[362,112],[272,450],[198,486],[130,422],[150,332],[352,232],[480,302],[446,476]]],\"も\":[[[146,190],[434,176]],[[156,318],[452,296]],[[322,60],[272,318],[296,456],[430,528],[502,450]]],\"や\":[[[134,266],[250,182],[420,168],[476,242],[400,330]],[[490,74],[420,150]],[[212,60],[326,494]]],\"ゆ\":[[[146,156],[138,472],[164,322],[250,202],[392,168],[480,242],[430,382],[262,400]],[[322,100],[362,318],[300,524]]],\"よ\":[[[318,182],[438,168]],[[288,78],[284,400],[240,498],[186,486],[168,412],[216,366],[382,400],[480,472]]],\"ら\":[[[270,48],[374,126]],[[262,156],[254,332],[382,332],[422,420],[326,510],[254,486]]],\"り\":[[[198,126],[190,332],[262,330]],[[404,112],[416,356],[336,546]]],\"る\":[[[198,116],[392,86],[152,382],[240,276],[348,254],[446,348],[434,438],[362,524],[258,472],[284,412],[340,408],[396,476]]],\"れ\":[[[194,90],[168,528]],[[130,220],[254,176],[104,486],[400,152],[362,408],[392,472],[502,460]]],\"ろ\":[[[182,138],[412,86],[138,356],[254,266],[392,284],[442,360],[434,456],[296,512]]],\"わ\":[[[176,78],[176,486]],[[122,194],[236,156],[120,450],[314,176],[480,168],[502,386],[382,450]]],\"を\":[[[160,180],[442,126]],[[300,60],[236,284],[300,270],[360,330],[340,456]],[[426,284],[284,332],[232,464],[288,546],[434,546]]],\"ん\":[[[392,74],[104,502],[270,292],[360,510],[450,510],[506,450]]],\n}\n\nexport default function () {\n  const [char, setChar] = useState(\"\");\n  const [pinyin, setPinyin] = useState(\"\");\n  const [state, setState] = useReducer((state, action) => {\n    return {\n      ...state,\n      ...action\n    }\n  }, {\n      selectedIndex: 0,\n      tabs: ['Hiragana', 'Katakana'],\n      Hiragana: [[\n        [\"あ\", \"い\", \"う\", \"え\", \"お\"],\n        [\"か\", \"き\", \"く\", \"け\", \"こ\"],\n        [\"さ\", \"し\", \"す\", \"せ\", \"そ\"],\n        [\"た\", \"ち\", \"つ\", \"て\", \"と\"],\n        [\"な\", \"に\", \"ぬ\", \"ね\", \"の\"],\n        [\"は\", \"ひ\", \"ふ\", \"へ\", \"ほ\"],\n        [\"ま\", \"み\", \"む\", \"め\", \"も\"],\n        [\"や\", \"ゆ\", \"よ\"],\n        [\"ら\", \"り\", \"る\", \"れ\", \"ろ\"],\n        [\"わ\", \"を\"],\n        [\"ん\"]\n      ],\n      [\n        [\"が\", \"ぎ\", \"ぐ\", \"げ\", \"ご\"],\n        [\"ざ\", \"じ\", \"ず\", \"ぜ\", \"ぞ\"],\n        [\"だ\", \"ぢ\", \"づ\", \"で\", \"ど\"],\n        [\"ば\", \"び\", \"ぶ\", \"べ\", \"ぼ\"],\n        [\"ぱ\", \"ぴ\", \"ぷ\", \"ぺ\", \"ぽ\"],\n        [\"きゃ\", \"きゅ\", \"きょ\"],\n        [\"しゃ\", \"しゅ\", \"しょ\"],\n        [\"ちゃ\", \"ちゅ\", \"ちょ\"],\n        [\"にゃ\", \"にゅ\", \"にょ\"],\n        [\"ひゃ\", \"ひゅ\", \"ひょ\"],\n        [\"みゃ\", \"みゅ\", \"みょ\"],\n        [\"りゃ\", \"りゅ\", \"りょ\"],\n        [\"ぎゃ\", \"ぎゅ\", \"ぎょ\"],\n        [\"じゃ\", \"じゅ\", \"じょ\"],\n        [\"びゃ\", \"びゅ\", \"びょ\"],\n        [\"ぴゃ\", \"ぴゅ\", \"ぴょ\"]\n      ]\n      ],\n      Katakana: [[\n        [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\"],\n        [\"カ\", \"キ\", \"ク\", \"ケ\", \"コ\"],\n        [\"サ\", \"シ\", \"ス\", \"セ\", \"ソ\"],\n        [\"タ\", \"チ\", \"ツ\", \"テ\", \"ト\"],\n        [\"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\"],\n        [\"ハ\", \"ヒ\", \"フ\", \"ヘ\", \"ホ\"],\n        [\"マ\", \"ミ\", \"ム\", \"メ\", \"モ\"],\n        [\"ヤ\", \"ユ\", \"ヨ\"],\n        [\"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\"],\n        [\"ワ\", \"ヲ\"],\n        [\"ン\"],\n      ],\n      [\n        [\"ガ\", \"ギ\", \"グ\", \"ゲ\", \"ゴ\"],\n        [\"ザ\", \"ジ\", \"ズ\", \"ゼ\", \"ゾ\"],\n        [\"ダ\", \"ヂ\", \"ヅ\", \"デ\", \"ド\"],\n        [\"バ\", \"ビ\", \"ブ\", \"ベ\", \"ボ\"],\n        [\"パ\", \"ピ\", \"プ\", \"ペ\", \"ポ\"],\n        [\"キャ\", \"キュ\", \"キョ\"],\n        [\"シャ\", \"シュ\", \"ショ\"],\n        [\"チャ\", \"チュ\", \"チョ\"],\n        [\"ニャ\", \"ニュ\", \"ニョ\"],\n        [\"ヒャ\", \"ヒュ\", \"ヒョ\"],\n        [\"ミャ\", \"ミュ\", \"ミョ\"],\n        [\"リャ\", \"リュ\", \"リョ\"],\n        [\"ギャ\", \"ギュ\", \"ギョ\"],\n        [\"ジャ\", \"ジュ\", \"ジョ\"],\n        [\"ビャ\", \"ビュ\", \"ビョ\"],\n        [\"ピャ\", \"ピュ\", \"ピョ\"]\n      ]\n      ],\n      yin: [[\n        ['a', 'i', 'u', 'e', 'o'],\n        ['ka', 'ki', 'ku', 'ke', 'ko'],\n        ['sa', 'shi', 'su', 'se', 'so'],\n        ['ta', 'chi', 'tsu', 'te', 'to'],\n        ['na', 'ni', 'nu', 'ne', 'no'],\n        ['ha', 'hi', 'fu', 'he', 'ho'],\n        ['ma', 'mi', 'mu', 'me', 'mo'],\n        ['ya', 'yu', 'yo'],\n        ['ra', 'ri', 'ru', 're', 'ro'],\n        ['wa','o'],\n        ['n']\n      ],[\n        ['ga', 'gi', 'gu', 'ge', 'go'],\n        ['za', 'ji', 'zu', 'ze', 'zo'],\n        ['da', 'ji', 'zu', 'de', 'do'],\n        ['ba', 'bi', 'bu', 'be', 'bo'],\n        ['pa', 'pi', 'pu', 'pe', 'po'],\n        ['kya',  'kyu',  'kyo'],\n        ['sha',  'shu',  'sho'],\n        ['cha',  'chu',  'cho'],\n        ['nya',  'nyu',  'nyo'],\n        ['hya',  'hyu',  'hyo'],\n        ['mya',  'myu',  'myo'],\n        ['rya',  'ryu',  'ryo'],\n        ['gya',  'gyu',  'gyo'],\n        ['ja',  'ju',  'jo'],\n        ['bya',  'byu',  'byo'],\n        ['pya',  'pyu',  'pyo'],\n      ]]\n    })\n  const onSearch = slug => {\n    if (char && slug == char) {\n      location.reload();\n    }\n    cancelAnimationFrame(reqFrame);\n    paths = [];\n\n    if (slug) {\n      slug = slug.slice(0, 1);\n      if (chinese[slug]) {\n        paths = JSON.parse(JSON.stringify(chinese[slug]));\n        location.hash = \"#/\" + slug;\n        setChar(slug);\n      }\n    } else {\n      paths = [];\n      if (window.history.pushState) {\n        window.history.pushState(\"\", \"/\", window.location.pathname);\n      } else {\n        window.location.hash = \"\";\n      }\n      setChar(\"\");\n    }\n  };\n\n  const toTop = () => {\n    try {\n      // trying to use new API - https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\"\n      });\n    } catch (error) {\n      // just a fallback for older browsers\n      window.scrollTo(0, 0);\n    }\n  };\n  const draw = startTime => {\n    if (!__CLIENT__) {\n      return;\n    }\n    var canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 4;\n    //画田字格\n    var drawBoard = function () {\n      ctx.setLineDash([]);\n      ctx.strokeStyle = \"red\"; // red\n      for (var i = 0; i < BOARD_SIZE; i++) {\n        ctx.beginPath();\n        ctx.moveTo(PADDING + i * BOARD_CELL_SIZE, PADDING);\n        ctx.lineTo(\n          PADDING + i * BOARD_CELL_SIZE,\n          BOARD_CELL_SIZE * BOARD_SIZE - PADDING\n        );\n        ctx.stroke();\n        ctx.moveTo(PADDING, PADDING + i * BOARD_CELL_SIZE);\n        ctx.lineTo(\n          BOARD_CELL_SIZE * BOARD_SIZE - PADDING,\n          PADDING + i * BOARD_CELL_SIZE\n        );\n        ctx.stroke();\n      }\n\n      // X\n      ctx.beginPath();\n      ctx.setLineDash([5, 15]);\n      ctx.moveTo(0, 0);\n      ctx.lineTo(600, 600);\n      ctx.stroke();\n      // X\n      ctx.beginPath();\n      ctx.setLineDash([5, 15]);\n      ctx.moveTo(600, 0);\n      ctx.lineTo(0, 600);\n      ctx.stroke();\n\n      ctx.closePath();\n    };\n    drawBoard();\n    const drawWord = thepaths => {\n      if (startTime !== time) {\n        return;\n      }\n      var vertices = [];\n      if (thepaths.length > 0) {\n        vertices = thepaths.shift();\n      } else {\n        return;\n      }\n      // calculate incremental points along the path\n      var points = calcWaypoints(vertices);\n      // extend the line from start to finish with animation\n      // calc waypoints traveling along vertices\n      function calcWaypoints(vertices) {\n        var waypoints = [];\n        var fps = 50;\n        var len = vertices.length;\n        if (len > 3) {\n          fps = 40;\n        }\n        for (var i = 1; i < len; i++) {\n          var pt0 = vertices[i - 1];\n          var pt1 = vertices[i];\n          var dx = pt1[0] - pt0[0];\n          var dy = pt1[1] - pt0[1];\n          for (var j = 0; j < fps; j++) {\n            var x = pt0[0] + (dx * j) / fps;\n            var y = pt0[1] + (dy * j) / fps;\n            waypoints.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n        return waypoints;\n      }\n      var t = 1;\n      function animate() {\n        if (startTime !== time) {\n          cancelAnimationFrame(reqFrame);\n          return;\n        }\n        ctx.lineCap = \"round\";\n        ctx.lineWidth = 15;\n        ctx.strokeStyle = \"#000\";\n        ctx.beginPath();\n        ctx.moveTo(points[t - 1].x, points[t - 1].y);\n        ctx.lineTo(points[t].x, points[t].y);\n        ctx.stroke();\n\n        if (t < points.length - 1) {\n          reqFrame = requestAnimationFrame(animate);\n        } else {\n          drawWord(thepaths);\n        }\n        t++;\n      }\n      animate();\n    };\n    if (char && paths && paths.length) {\n      drawWord(paths);\n    }\n  };\n  let audioRef = React.createRef() as any;\n  useEffect(() => {\n    time = new Date().getTime();\n    draw(time);\n\n    try {\n      if (!char) return;\n      let py = transPinyin(char);\n      setPinyin(py);\n      let tone = converttoNoTone(py).trim();\n      let t = `https://raw.githubusercontent.com/icai/tts-chinese/master/dist/${tone}.mp3`;\n      var n = audioRef;\n      n.setAttribute(\"datasrc\", t);\n    } catch (e) { }\n  }, [char]);\n\n  useEffect(() => {\n    let path = decodeURIComponent(location.hash.slice(2));\n    onSearch(path);\n  }, []);\n\n  const onVoiceHover = () => {\n    var n = audioRef;\n    n.src = n.getAttribute(\"datasrc\");\n  };\n\n  const onVoiceClick = () => {\n    var n = audioRef;\n    n.loop = false;\n    n.play();\n  };\n\n  const cardClick = (yin, _word)=> {\n    var n = audioRef;\n    if(yin.length == 1) {\n      yin = yin + yin;\n    }\n    n.src = `https://www.nhk.or.jp/lesson/mp3/syllabary/${yin}.mp3`\n    n.loop = false;\n    n.play();\n    onSearch(word);\n  }\n\n  const cc = (line)=> {\n    return line.length == 1 ? {justifyContent: 'flex-end'} : {}\n  }\n\n  return (\n    <Pane width=\"800px\" height=\"100%\" margin=\"auto\">\n      <Pane\n        className=\"clearfix\"\n        width={\"600px\"}\n        margin={\"auto\"}\n        paddingTop={50}\n      >\n        <canvas id=\"canvas\" width={LAYOUT_SIZE} height={LAYOUT_SIZE}></canvas>\n      </Pane>\n      <Pane lineHeight=\"32px\" fontSize=\"18px\">\n        拼 音: {pinyin}{\" \"}\n        <VoiceComponent\n          style={{ verticalAlign: \"middle\", cursor: \"pointer\" }}\n          onMouseEnter={onVoiceHover}\n          onClick={onVoiceClick}\n        ></VoiceComponent>\n      </Pane>\n      <Pane>\n        <Pane >\n          <Tablist marginBottom={16} flexBasis={240} textAlign={'right'} marginRight={24}>\n            {state.tabs.map((tab, index) => (\n              <Tab\n                key={tab}\n                id={tab}\n                onSelect={() => setState({ selectedIndex: index })}\n                isSelected={index === state.selectedIndex}\n                aria-controls={`panel-${tab}`}\n              >\n                <h3>{tab}</h3>\n              </Tab>\n            ))}\n          </Tablist>\n          <Pane padding={16} background=\"#fff\" flex=\"1\">\n            {state.tabs.map((tab, index) => (\n              <Pane\n                key={tab}\n                id={`panel-${tab}`}\n                role=\"tabpanel\"\n                aria-labelledby={tab}\n                aria-hidden={index !== state.selectedIndex}\n                display={index === state.selectedIndex ? 'block' : 'none'}\n              >\n                <Pane display=\"flex\" alignItems=\"flex-start\" >\n                {state[tab].map((col, ix) => (\n                  <Pane\n                    key={ix}\n                    flex=\"1 1 50%\"\n                    flexWrap=\"wrap\"\n                    display=\"flex\"\n                    padding={0}\n                    marginX={20}\n                    alignItems=\"flex-start\"\n                    justifyContent=\"center\"\n                  >\n                    {col.map((line, li) => (\n                      <Pane\n                        key={li}\n                        flex=\"1 1 100%\"\n                        display=\"flex\"\n                        alignItems=\"flex-start\"\n                        justifyContent=\"space-between\"\n                        {...cc(line)}\n                      >\n                        {\n                          line.map((word, wi) => (\n                            <Pane\n                              key={wi}\n                              margin={1}\n                              display=\"flex\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                              padding={10}\n                              minWidth={54}\n                              flexDirection=\"column\"\n                              onClick={()=> {cardClick(state.yin[ix][li][wi], word)}}\n                              style={{ border: '1px solid #69BF61', borderRadius: '5px'}}\n                            >\n                              <Text fontSize={'35px'}>{word}</Text>\n                              <Text color=\"#69BF61\" marginTop={10} >{state.yin[ix][li][wi]}</Text>\n                            </Pane>\n                          ))\n                        }\n                      </Pane>\n                    ))}\n                  </Pane>\n                ))}\n                </Pane>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n        {commonWords.split(\"\").map(word => {\n          return (\n            <a\n              href=\"javascript:;\"\n              className=\"word\"\n              key={word}\n              onClick={() => {\n                toTop();\n                setTimeout(() => {\n                  onSearch(word);\n                }, 500);\n              }}\n            >\n              {word}\n            </a>\n          );\n        })}\n      </Pane>\n      <div style={{ display: \"none\" }}>\n        <audio\n          id=\"audio\"\n          ref={input => {\n            audioRef = input;\n          }}\n        ></audio>\n      </div>\n\n      <style jsx>{`\n          .word {\n            margin-right: 20px;\n            line-height: 25px;\n            color: #000;\n          }\n        `}</style>\n    </Pane>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAIA;AACA;AACA;AACA;AAgCA;AAgCA;AAnEA;AARA;AAAA;AAAA;AACA;AAyGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,idA;AAVA;AAXA;AAVA;AA2DA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9GA;AAAA;AAAA;AA+HA;;;;A","sourceRoot":""}