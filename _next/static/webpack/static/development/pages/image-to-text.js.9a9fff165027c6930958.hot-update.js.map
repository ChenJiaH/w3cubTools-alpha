{"version":3,"file":"static/webpack/static/development/pages/image-to-text.js.9a9fff165027c6930958.hot-update.js","sources":["webpack:///./components/image-to-text/component/FramesModal.jsx"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n// import Button from './Button'\nimport Divide from \"./Divide\";\nimport { Button, Dialog } from \"evergreen-ui\";\nimport { createImage } from \"../tools/imageCreater\";\nimport \"../style/modal.css\";\n\n/**\n * 显示图片转字符结果的模态框\n *\n * @export\n * @class FramesModal\n * @extends {React.PureComponent}\n */\nexport default class FramesModal extends React.PureComponent {\n  /**\n   * @typedef Frame\n   * @prop {ImageData} data\n   * @prop {string[]} text\n   * @prop {number} delay\n   */\n\n  /**\n   * Creates an instance of FramesModal.\n   *\n   * @param {object} props\n   * @param {Frame[]} props.frames\n   * @param {File} props.file\n   *\n   * @memberof FramesModal\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      color: \"#000000\",\n      bgColor: \"#ffffff\",\n      frameIndex: 0\n    };\n    this.playTimer = null;\n    this.outputRef = React.createRef();\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.file) {\n      // 更换文件时，将播放帧序号重置回0\n      return {\n        frameIndex: 0\n      };\n    }\n    return null;\n  }\n\n  /**\n   * 保存图片为文件\n   *\n   * @memberof FramesModal\n   */\n  savePic = () => {\n    const createOption = {\n      div: this.outputRef.current,\n      frames: this.props.frames,\n      file: this.props.file,\n      color: this.state.color,\n      bgColor: this.state.bgColor,\n      font: 'monospace'\n    };\n    createImage(createOption);\n  };\n\n  setColor = ev => {\n    this.setState({\n      color: ev.target.value\n    });\n  };\n\n  setBgColor = ev => {\n    this.setState({\n      bgColor: ev.target.value\n    });\n  };\n\n  /**\n   * 播放gif图像\n   *\n   * @memberof FramesModal\n   */\n  play() {\n    // 不播放只有一帧的图片（非gif）\n    if (this.props.frames.length <= 1) {\n      return;\n    }\n    const nextFrame = () => {\n      const delay = this.props.frames[this.state.frameIndex].delay;\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.frameIndex + 1;\n        if (nextIndex === this.props.frames.length) {\n          nextIndex = 0;\n        }\n        this.setState(\n          {\n            frameIndex: nextIndex\n          },\n          nextFrame\n        );\n      }, delay);\n    };\n    nextFrame();\n  }\n\n  /**\n   * 停止播放gif图像\n   *\n   * @memberof FramesModal\n   */\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer);\n    }\n  }\n\n  close = ev => {\n    ev.preventDefault();\n    this.stop();\n    this.setState({\n      open: false\n    });\n  };\n\n  open = () => {\n    this.play();\n    this.setState({\n      open: true\n    });\n  };\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    });\n    return (\n      <Dialog\n        className={modalClasses}\n        isShown={this.state.open}\n        width={\"max-content\"}\n        topOffset=\"30px\"\n        title=\"Image conversion results\"\n        onCloseComplete={() => this.setState({ open: false })}\n        hasFooter={false}\n      >\n        <Divide />\n        <div className=\"output-options\">\n          <label htmlFor=\"color\">Text Color:</label>\n          <input\n            type=\"color\"\n            id=\"color\"\n            name=\"color\"\n            value={this.state.color}\n            onChange={this.setColor}\n          />\n          <label htmlFor=\"color\">Background Color:</label>\n          <input\n            type=\"color\"\n            id=\"bgColor\"\n            name=\"bgColor\"\n            value={this.state.bgColor}\n            onChange={this.setBgColor}\n          />\n          <Button className=\"save-btn\" onClick={this.savePic}>\n          Save as Image\n          </Button>\n        </div>\n        <Divide />\n        <div className=\"output-text-wrapper\">\n          <div\n            id=\"output-text-block\"\n            className=\"output-text-block\"\n            style={{\n              color: this.state.color,\n              backgroundColor: this.state.bgColor\n            }}\n            ref={this.outputRef}\n          >\n            {this.props.frames.length\n              ? this.props.frames[this.state.frameIndex].text.map(\n                  (line, index) => <pre key={index}>{line}</pre>\n                )\n              : null}\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;;;;;AACA;;;;;;;AAOA;;;;;;;;;AASA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AA3CA;AA6CA;AACA;AADA;AAGA;AACA;AAjDA;AAmDA;AACA;AADA;AAGA;AACA;AAvDA;AAgGA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAtGA;AAwGA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA3GA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;;;;AAyCA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAiBA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAtJA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;;;;;;;;;AA5CA;AACA;;;;;A","sourceRoot":""}