{"version":3,"file":"static/webpack/static/development/pages/mime-list.js.7908c638b443708a26f3.hot-update.js","sources":["webpack:///./pages/mime-list.tsx"],"sourcesContent":["import mimes from \"@constants/mime.json\"\nimport Mdloader from \"@components/Mdloader\";\n// @ts-ignore\nimport { SearchInput, Table } from \"evergreen-ui\";\nimport { useState, useEffect } from \"react\";\nimport { createFuzzyList } from \"@utils/fuzzyScore\";\n\nconst lists = createFuzzyList(mimes)\n\nexport default function () {\n  const [query, setQuery] = useState(\"\");\n  const [data, setData] = useState(lists);\n  useEffect(() => {\n    let sorted = [];\n    if (query) {\n      sorted = lists.filter(function (item) {\n        return (item._cachedScore = item.score(query)) >= 0.5;\n      }).sort(function (a, b) {\n        var as = a._cachedScore;\n        var bs = b._cachedScore;\n        return as > bs ? -1 : as == bs && a.i < b.i ? -1 : 1;\n      })\n    } else {\n      sorted = lists;\n    }\n    setData(sorted);\n  }, [query]);\n  return (\n    <>\n      <SearchInput\n        placeholder=\"Typing something\"\n        onChange={e => {\n          setQuery(e.target.value);\n        }}\n        value={query}\n        width={\"600px\"}\n        marginX=\"auto\"\n        height={40}\n        marginBottom={10}\n      />\n      <Table>\n        <Table.Head>\n          <Table.TextHeaderCell>\n              Extension\n          </Table.TextHeaderCell>\n          <Table.TextHeaderCell>\n            Content-Type(Mime-Type)\n          </Table.TextHeaderCell>\n        </Table.Head>\n        <Table.Body >\n          {data.map((item, ix) => (\n            <Table.Row key={ix} isSelectable onSelect={() => alert(item.toString())}>\n              <Table.TextCell>.{item[0]}</Table.TextCell>\n              <Table.TextCell>{item[1]}</Table.TextCell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <table className=\"entitles\">\n        <tbody>\n          <tr>\n            <th className=\"separateColor\">Extension</th>\n            <th>Content-Type(Mime-Type)</th>\n          </tr>\n          {data.map((item, ix) => {\n            return (\n              <tr\n                key={ix}\n              >\n                <td>\n                  {item[0]}\n                </td>\n                <td >\n                  <code>\n                    {item[1]}\n                  </code>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <style jsx>{`\n        table.entitles {\n          font: 0.8em Monaco;\n          display: block;\n          text-align: center;\n        }\n      `}</style>\n    </>\n  );\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAnDA;AAAA;AAAA;AA+DA;;;;A","sourceRoot":""}