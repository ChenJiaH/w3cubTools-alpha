{"version":3,"file":"static/webpack/static/development/pages/image-to-text.js.a5b8fee5d2d8232506f1.hot-update.js","sources":["webpack:///./components/image-to-text/App.jsx","webpack:///./components/image-to-text/component/Divide.jsx","webpack:///./components/image-to-text/component/FramesModal.jsx","webpack:///./components/image-to-text/component/ImagePreviewUpload.jsx","webpack:///./components/image-to-text/component/Row.jsx","webpack:///./components/image-to-text/component/TransformSetting.jsx","webpack:///./components/image-to-text/tools/constant.js","webpack:///./components/image-to-text/tools/datauri.js","webpack:///./components/image-to-text/tools/gifParser.js","webpack:///./components/image-to-text/tools/imageCommon.js","webpack:///./components/image-to-text/tools/imageCreater.js","webpack:///./components/image-to-text/tools/imageParser.js","webpack:///./components/image-to-text/tools/imageToText.js","webpack:///./pages/image-to-text.tsx"],"sourcesContent":["import React from \"react\";\nimport Divide from \"./component/Divide\";\n// import Button from './component/Button'\nimport { Button, TextInput, Alert } from \"evergreen-ui\";\nimport FramesModal from \"./component/FramesModal\";\nimport TransformSetting from \"./component/TransformSetting\";\nimport Row from \"./component/Row\";\nimport ImagePreviewUpload from \"./component/ImagePreviewUpload\";\nimport {\n  transformImageToText,\n  createGrayToTextFunc\n} from \"./tools/imageToText\";\nimport { getImageDatas } from \"./tools/imageParser\";\nimport { DEFAULT_AVAILABLE_TEXTS } from \"./tools/constant\";\nimport \"./style/index.less\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      transformWidth: \"\",\n      transformResult: [],\n      transformPlaceholder: DEFAULT_AVAILABLE_TEXTS,\n      rawImage: null,\n      file: null\n    };\n    this.imagePreview = React.createRef();\n    this.framesModal = React.createRef();\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({ rawImage, file });\n  };\n\n  setTransformType = ev => {\n    this.setState({\n      transformType: ev.target.value\n    });\n  };\n\n  setTransformPlaceholder = ev => {\n    this.setState({\n      transformPlaceholder: ev.target.value\n    });\n  };\n\n  setTransformWidth = ev => {\n    const value = ev.target.value;\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0;\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return;\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    });\n  };\n\n  rescale = () => {\n    if (!this.state.file) {\n      return;\n    }\n    this.imagePreview.current.scaleImageContainer();\n  };\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    const file = this.state.file;\n    if (!file) {\n      return;\n    }\n    this.setState({\n      isParsing: true\n    });\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage();\n    const framesData = getImageDatas(image, file);\n    framesData.forEach(frameData => {\n      frameData.text = transformImageToText(\n        frameData.data,\n        createGrayToTextFunc(\n          this.state.transformPlaceholder || DEFAULT_AVAILABLE_TEXTS\n        )\n      );\n    });\n    this.setState(\n      {\n        transformResult: framesData\n      },\n      () => {\n        this.framesModal.current.open();\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"imt-container\">\n        <header className=\"clear\">\n          <h1 className=\"text-center\">Image to Ascii Art(图片转字符画)</h1>\n        </header>\n        <Divide />\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting\n            label=\"Target image width:\"\n            labelFor=\"transform-size\"\n          >\n            <TextInput\n              type=\"number\"\n              id=\"transform-size\"\n              className=\"transform-size-input\"\n              name=\"transform-size\"\n              value={this.state.transformWidth}\n              onChange={this.setTransformWidth}\n            />\n          </TransformSetting>\n          <Button height={60} onClick={this.rescale}>\n            Rescale\n          </Button>\n          <TransformSetting\n            label=\"Conversion character:\"\n            labelFor=\"transform-placeholder\"\n          >\n            <TextInput\n              type=\"text\"\n              id=\"transform-placeholder\"\n              className=\"transform-placeholder-input\"\n              name=\"transform-placeholder\"\n              value={this.state.transformPlaceholder}\n              onChange={this.setTransformPlaceholder}\n            />\n          </TransformSetting>\n          <Button height={60} whiteSpace=\"nowrap\" onClick={this.transform}>\n            Start Convert\n          </Button>\n        </Row>\n        <Divide />\n        <Row>\n          <ImagePreviewUpload\n            file={this.state.file}\n            image={this.state.rawImage}\n            setImageAndFile={this.setImageAndFile}\n            previewWidth={parseInt(this.state.transformWidth)}\n            ref={this.imagePreview}\n          ></ImagePreviewUpload>\n        </Row>\n        <FramesModal\n          ref={this.framesModal}\n          frames={this.state.transformResult}\n          file={this.state.file}\n        />\n        <Alert\n          intent=\"none\"\n          className=\"helps\"\n          title=\"When converting a GIF or a larger image, a certain amount of stagnation may occur, which is normal. Please wait patiently.\"\n          marginBottom={32}\n        />\n        {/* <p className=\"helps\"></p> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\n/**\n * 分割线组件\n *\n * @export\n * @returns\n */\nexport default function Divide() {\n  return <div className=\"divide\" />;\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n// import Button from './Button'\nimport Divide from \"./Divide\";\nimport { Button, Dialog } from \"evergreen-ui\";\nimport { createImage } from \"../tools/imageCreater\";\nimport \"../style/modal.css\";\n\n/**\n * 显示图片转字符结果的模态框\n *\n * @export\n * @class FramesModal\n * @extends {React.PureComponent}\n */\nexport default class FramesModal extends React.PureComponent {\n  /**\n   * @typedef Frame\n   * @prop {ImageData} data\n   * @prop {string[]} text\n   * @prop {number} delay\n   */\n\n  /**\n   * Creates an instance of FramesModal.\n   *\n   * @param {object} props\n   * @param {Frame[]} props.frames\n   * @param {File} props.file\n   *\n   * @memberof FramesModal\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      color: \"#000000\",\n      bgColor: \"#ffffff\",\n      frameIndex: 0\n    };\n    this.playTimer = null;\n    this.outputRef = React.createRef();\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.file) {\n      // 更换文件时，将播放帧序号重置回0\n      return {\n        frameIndex: 0\n      };\n    }\n    return null;\n  }\n\n  /**\n   * 保存图片为文件\n   *\n   * @memberof FramesModal\n   */\n  savePic = () => {\n    const createOption = {\n      div: this.outputRef.current,\n      frames: this.props.frames,\n      file: this.props.file,\n      color: this.state.color,\n      bgColor: this.state.bgColor\n    };\n    createImage(createOption);\n  };\n\n  setColor = ev => {\n    this.setState({\n      color: ev.target.value\n    });\n  };\n\n  setBgColor = ev => {\n    this.setState({\n      bgColor: ev.target.value\n    });\n  };\n\n  /**\n   * 播放gif图像\n   *\n   * @memberof FramesModal\n   */\n  play() {\n    // 不播放只有一帧的图片（非gif）\n    if (this.props.frames.length <= 1) {\n      return;\n    }\n    const nextFrame = () => {\n      const delay = this.props.frames[this.state.frameIndex].delay;\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.frameIndex + 1;\n        if (nextIndex === this.props.frames.length) {\n          nextIndex = 0;\n        }\n        this.setState(\n          {\n            frameIndex: nextIndex\n          },\n          nextFrame\n        );\n      }, delay);\n    };\n    nextFrame();\n  }\n\n  /**\n   * 停止播放gif图像\n   *\n   * @memberof FramesModal\n   */\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer);\n    }\n  }\n\n  close = ev => {\n    ev.preventDefault();\n    this.stop();\n    this.setState({\n      open: false\n    });\n  };\n\n  open = () => {\n    this.play();\n    this.setState({\n      open: true\n    });\n  };\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    });\n    return (\n      <Dialog\n        className={modalClasses}\n        isShown={this.state.open}\n        width={\"max-content\"}\n        topOffset=\"30px\"\n        title=\"图片转化结果\"\n        onCloseComplete={() => this.setState({ open: false })}\n        hasFooter={false}\n      >\n        <Divide />\n        <div className=\"output-options\">\n          <label htmlFor=\"color\">文字颜色:</label>\n          <input\n            type=\"color\"\n            id=\"color\"\n            name=\"color\"\n            value={this.state.color}\n            onChange={this.setColor}\n          />\n          <label htmlFor=\"color\">背景颜色:</label>\n          <input\n            type=\"color\"\n            id=\"bgColor\"\n            name=\"bgColor\"\n            value={this.state.bgColor}\n            onChange={this.setBgColor}\n          />\n          <Button className=\"save-btn\" onClick={this.savePic}>\n            保存为图片\n          </Button>\n        </div>\n        <Divide />\n        <div className=\"output-text-wrapper\">\n          <div\n            id=\"output-text-block\"\n            className=\"output-text-block\"\n            style={{\n              color: this.state.color,\n              backgroundColor: this.state.bgColor\n            }}\n            ref={this.outputRef}\n          >\n            {this.props.frames.length\n              ? this.props.frames[this.state.frameIndex].text.map(\n                  (line, index) => <pre key={index}>{line}</pre>\n                )\n              : null}\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { checkImageType } from \"../tools/imageCommon\";\nimport { toaster } from \"evergreen-ui\";\nimport \"../style/imagePreviewUpload.css\";\n/**\n * 图片上传预览组件\n *\n * @export\n * @class ImagePreviewUpload\n * @extends {React.Component}\n */\nexport default class ImagePreviewUpload extends React.Component {\n  /**\n   * Creates an instance of ImagePreviewUpload.\n   *\n   * @param {object} props\n   * @param {HTMLImageElement} props.image\n   * @param {File} props.file\n   * @param {number} props.previewWidth\n   * @param {Function} props.setImageAndFile\n   *\n   * @memberof ImagePreviewUpload\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      width: 400,\n      height: 250\n    };\n\n    /**\n     * @type {React.RefObject<HTMLInputElement>}\n     */\n    this.fileUpload = React.createRef();\n    this.currentImageRef = React.createRef();\n    this.componentRef = React.createRef();\n  }\n\n  /**\n   * 返回当前显示图像的引用（有宽高变化）\n   *\n   * @returns\n   * @memberof ImagePreviewUpload\n   */\n  getCurrentImage() {\n    return this.currentImageRef.current;\n  }\n\n  dragEnter = ev => {\n    ev.preventDefault();\n    this.setState({\n      isDragging: true\n    });\n  };\n\n  dragOver = ev => {\n    ev.preventDefault();\n  };\n\n  dragLeave = ev => {\n    ev.preventDefault();\n    this.setState({\n      isDragging: false\n    });\n  };\n\n  drop = ev => {\n    ev.preventDefault();\n    this.setState({\n      isDragging: false\n    });\n    const file = ev.dataTransfer.files[0];\n    this.previewImage(file);\n  };\n\n  openFileInput = () => {\n    this.fileUpload.current.click();\n  };\n\n  setFile = ev => {\n    const file = ev.target.files[0];\n    if (file) {\n      this.previewImage(file);\n    }\n  };\n\n  /**\n   * 预览图片文件\n   *\n   * @param {File} file\n   * @memberof ImagePreviewUpload\n   */\n  previewImage(file) {\n    if (!checkImageType(file.type)) {\n      toaster.notify(\"Files in this format are not supported\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.addEventListener(\"load\", () => {\n      const image = new Image();\n      image.addEventListener(\"load\", () => {\n        this.scaleImageContainer(image);\n        this.props.setImageAndFile(image, file);\n      });\n      image.src = reader.result;\n    });\n  }\n\n  /**\n   * 等比例缩放图片尺寸\n   *\n   * @param {HTMLImageElement} image\n   */\n  scaleImageContainer(image) {\n    if (!image) {\n      // 不传递image时，使用当前的image（App组件传递）\n      image = this.props.image;\n    }\n    const container = this.componentRef.current.parentElement;\n    let targetWidth = this.props.previewWidth;\n\n    // 缩放宽度检测\n    if (!targetWidth) {\n      // 没有指定宽度(或为0), 使用容器宽度\n      targetWidth = container.clientWidth;\n      // 容器宽度比图片原宽度大，使用图片原宽度\n      if (image.width < targetWidth) {\n        targetWidth = image.width;\n      }\n    } else if (targetWidth > container.clientWidth) {\n      toaster.notify(\n        \"More than the container size! Please re-enter the image width\"\n      );\n      return;\n    }\n\n    const ratio = image.width / targetWidth;\n    const targetHeight = image.height / ratio;\n    this.setState({\n      width: targetWidth,\n      height: targetHeight\n    });\n  }\n\n  render() {\n    const uploadBlockClasses = classNames(\n      \"upload-image-block\",\n      { active: this.state.isDragging },\n      this.props.className\n    );\n    return (\n      <div\n        onDragEnter={this.dragEnter}\n        onDragOver={this.dragOver}\n        onDragLeave={this.dragLeave}\n        onDrop={this.drop}\n        onClick={this.openFileInput}\n        className={uploadBlockClasses}\n        style={{ width: this.state.width, height: this.state.height }}\n        ref={this.componentRef}\n      >\n        <input\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"image/*\"\n          ref={this.fileUpload}\n          onChange={this.setFile}\n        />\n        <span className=\"upload-label\">Upload Image</span>\n        {this.props.image ? (\n          <img\n            ref={this.currentImageRef}\n            src={this.props.image.src}\n            className=\"preview-image\"\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\n/**\n * 行组件\n *\n * @export\n * @param {React.HTMLAttributes<HTMLDivElement>} props\n * @returns\n */\nexport default function Row(props) {\n  let { children, className, ...attrs } = props;\n  className = classNames(className, \"row\");\n  return (\n    <div {...attrs} className={className}>\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../style/transformSetting.css\";\n\nexport default class TransformSetting extends React.PureComponent {\n  static defaultProps = {\n    label: \"\",\n    labelFor: \"\"\n  };\n\n  render() {\n    return (\n      <div className=\"transform-setting\">\n        {this.props.label ? (\n          <label htmlFor={this.props.labelFor}>{this.props.label}</label>\n        ) : null}\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","// imageCreate.js, imageToText.js\nexport const FONT_WIDTH = 6;\nexport const FONT_HEIGHT = 12;\n\n// imageToText.js\nexport const DEFAULT_AVAILABLE_TEXTS = \"@#&$%863!i1uazvno~;*^+-. \";\n","/**\n * datauri 转 Uint8Array\n * https://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata\n *\n * @export\n * @param {string} uri\n * @returns\n */\nexport function decode(uri) {\n  // 找到分割 metadata 和 data 的逗号位置\n  const commaIndex = uri.indexOf(\",\");\n\n  const meta = uri.substring(5, commaIndex).split(\";\"); // 头部信息 metadata\n  const type = meta[0] || \"text/plain\";\n\n  const data = uri.substring(commaIndex + 1); // 内容信息\n  let byteString;\n  if (meta.indexOf(\"base64\") >= 0) {\n    byteString = atob(data);\n  } else {\n    byteString = unescape(data);\n  }\n  const buffer = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    buffer[i] = byteString.charCodeAt(i);\n  }\n  buffer.type = type;\n\n  return buffer;\n}\n","/**\n * Gif解析\n * https://github.com/intellilab/GIFParser\n *\n * @param {ArrayLike<number> | ArrayBufferLike} buffer\n * @returns\n */\nexport default function gifParser(buffer) {\n  const view = new Uint8Array(buffer);\n  let offset = 0;\n  const info = {\n    /**\n     * 署名和版本号信息\n     */\n    header: \"\",\n    /**\n     * 图像宽度\n     */\n    w: 0,\n    /**\n     * 图像高度\n     */\n    h: 0,\n    /**\n     * m - 全局颜色列表标志\n     */\n    m: 0,\n    /**\n     * cr - 颜色深度(Color ResoluTion)\n     */\n    cr: 0,\n    /**\n     * s - 分类标志(Sort Flag)\n     */\n    s: 0,\n    /**\n     * pixel - 全局颜色列表大小\n     */\n    pixel: 0,\n    /**\n     * 背景颜色: 背景颜色在全局颜色列表中的索引\n     */\n    bgIndex: 0,\n    /**\n     * 像素宽高比\n     */\n    radio: 1,\n    /**\n     * 全局颜色列表信息\n     */\n    colorTable: [],\n    frames: [],\n    comment: \"\"\n  };\n  let frame;\n\n  /**\n   * 读取指定长度字节\n   *\n   * @param {number} len\n   * @returns\n   */\n  function readByte(len) {\n    return view.slice(offset, (offset += len));\n  }\n\n  /**\n   * 读取gif头部信息 (起始 6 byte)\n   * 包括署名 (Signature) 和版本号 (Version)\n   */\n  function getHeader() {\n    const GIF_SIGNATURE_RE = /^GIF8[79]a$/;\n    info.header = \"\";\n    readByte(6).forEach(byte => {\n      info.header += String.fromCharCode(byte);\n    });\n    if (!info.header.match(GIF_SIGNATURE_RE)) {\n      throw new Error(\"GIF署名错误\");\n    }\n  }\n\n  /**\n   * 读取逻辑屏幕标识符 (Logical Screen Descriptor), 总共 7 byte\n   */\n  function getScreenDesc() {\n    const arr = readByte(7);\n\n    info.w = arr[0] + (arr[1] << 8);\n    info.h = arr[2] + (arr[3] << 8);\n    info.m = 1 & (arr[4] >> 7);\n    info.cr = 7 & (arr[4] >> 4);\n    info.s = 1 & (arr[4] >> 3);\n    info.pixel = 7 & arr[4];\n    info.bgIndex = arr[5];\n    info.radio = arr[6];\n\n    // 若全局颜色列表标志位置数了，则读取全局颜色列表\n    if (info.m) {\n      // 2 << pixel === 1 << (pixel + 1) === 2^(pixel+1)\n      info.colorTable = readByte((2 << info.pixel) * 3);\n    }\n  }\n\n  function decode() {\n    let bytes = readByte(1);\n\n    switch (bytes[0]) {\n      case 0x21: //扩展块, 33\n        extension();\n        break;\n      case 0x2c: //图像标识符, 44\n        bytes = readByte(9);\n        frame.img = {\n          x: bytes[0] + (bytes[1] << 8),\n          y: bytes[2] + (bytes[3] << 8),\n          w: bytes[4] + (bytes[5] << 8),\n          h: bytes[6] + (bytes[7] << 8),\n          m: 1 & (bytes[8] >> 7),\n          /**\n           * i - 交织标志(Interlace Flag)\n           */\n          i: 1 & (bytes[8] >> 6),\n          s: 1 & (bytes[8] >> 5),\n          r: 3 & (bytes[8] >> 3),\n          pixel: 7 & bytes[8],\n          colorTable: []\n        };\n\n        // 读取局部颜色列表信息\n        if (frame.img.m) {\n          frame.img.colorTable = readByte((2 << frame.img.pixel) * 3);\n        }\n\n        // 读取LZW编码的长度\n        frame.img.encodeSize = readByte(1)[0];\n\n        const encodeBuf = [];\n        while (1) {\n          bytes = readByte(1);\n          if (bytes[0]) {\n            // arr[0] 为当前块的大小（不包括自己这个字节）\n            // 读取这个数据块的所有数据，并保存为一个数组\n            readByte(bytes[0]).forEach(e => {\n              encodeBuf.push(e);\n            });\n          } else {\n            frame.img.encodeBuf = encodeBuf;\n            decode();\n            break;\n          }\n        }\n        break;\n      case 0x3b: // 终结符，59\n        console.log(\"Parse Finish.\");\n        break;\n      default:\n        // 未知标识符，报错\n        throw new Error(\"Unknow Byte Flag:\" + bytes[0]);\n    }\n  }\n\n  function extension() {\n    let bytes = readByte(1);\n    switch (bytes[0]) {\n      case 0xff: // 应用程序扩展, 255\n        if (readByte(1)[0] == 11) {\n          info.appVersion = \"\";\n          readByte(11).forEach(function(e) {\n            info.appVersion += String.fromCharCode(e);\n          });\n          while (1) {\n            bytes = readByte(1);\n            if (bytes[0]) {\n              readByte(bytes[0]);\n            } else {\n              decode();\n              break;\n            }\n          }\n        } else {\n          throw new Error(\"解析出错\");\n        }\n        break;\n      case 0xf9: // 图形控制扩展, 249\n        // 块大小固定为 4\n        if (readByte(1)[0] === 4) {\n          bytes = readByte(4);\n          frame = {};\n          frame.extension = {\n            // 处置方法\n            disp: 7 & (bytes[0] >> 2),\n            // 用户输入标准\n            i: 1 & (bytes[0] >> 1),\n            // 透明色标志\n            t: 1 & bytes[0],\n            // 延迟时间\n            delay: (bytes[1] + (bytes[2] << 8)) * 10,\n            // 透明色索引\n            tranIndex: bytes[3]\n          };\n          info.frames.push(frame);\n          // 标识块终结符\n          if (readByte(1)[0] == 0) {\n            decode();\n          } else {\n            throw new Error(\"解析出错\");\n          }\n        } else {\n          throw new Error(\"解析出错\");\n        }\n        break;\n      case 0xfe: // 注释块, 254\n        bytes = readByte(1);\n        if (bytes[0]) {\n          readByte(bytes[0]).forEach(function(e) {\n            info.comment += String.fromCharCode(e);\n          });\n          if (readByte(1)[0] == 0) {\n            decode();\n          }\n        }\n        break;\n      default:\n        console.log(bytes);\n        break;\n    }\n  }\n\n  function calcPixel() {\n    let lastImageData;\n    info.frames.forEach(function(frame) {\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      // 判断使用局部颜色列表还是全局颜色列表\n      const colorTable = frame.img.m ? frame.img.colorTable : info.colorTable;\n\n      canvas.width = info.w;\n      canvas.height = info.h;\n      let imageData = ctx.getImageData(0, 0, info.w, info.h);\n\n      lzw(frame.img.encodeBuf, frame.img.encodeSize)\n        .decode()\n        .forEach(function(pixel, i) {\n          imageData.data[i * 4] = colorTable[pixel * 3];\n          imageData.data[i * 4 + 1] = colorTable[pixel * 3 + 1];\n          imageData.data[i * 4 + 2] = colorTable[pixel * 3 + 2];\n          imageData.data[i * 4 + 3] = 255;\n          if (frame.extension.t && pixel == frame.extension.tranIndex) {\n            imageData.data[i * 4 + 3] = 0;\n          }\n        });\n      ctx.putImageData(\n        imageData,\n        frame.img.x,\n        frame.img.y,\n        0,\n        0,\n        frame.img.w,\n        frame.img.h\n      );\n      imageData = ctx.getImageData(0, 0, info.w, info.h);\n\n      if (lastImageData) {\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          // 某个像素不透明度为 0，用上一帧的相应位置的数据填补\n          if (imageData.data[i + 3] == 0) {\n            imageData.data[i] = lastImageData.data[i];\n            imageData.data[i + 1] = lastImageData.data[i + 1];\n            imageData.data[i + 2] = lastImageData.data[i + 2];\n            imageData.data[i + 3] = lastImageData.data[i + 3];\n          }\n        }\n      }\n      if (frame.extension.disp === 1 || frame.extension.disp === 0) {\n        lastImageData = imageData;\n      }\n      frame.data = imageData.data;\n    });\n  }\n\n  getHeader();\n  getScreenDesc();\n  decode();\n  calcPixel();\n\n  return {\n    width: info.w,\n    height: info.h,\n    frames: info.frames.map(frame => ({\n      /**\n       * @type {Uint8ClampedArray}\n       */\n      data: frame.data,\n      /**\n       * @type {number}\n       */\n      delay: frame.extension.delay\n    }))\n  };\n}\n\n/**\n * lzw压缩算法（解压缩）\n *\n * @param {Array} arr\n * @param {number} min\n * @returns\n */\nconst lzw = function(arr, min) {\n  const clearCode = 1 << min;\n  const eofCode = clearCode + 1;\n  let size = min + 1;\n  let dict = [];\n  let pos = 0;\n\n  /**\n   * 清除已存储的压缩映射表数据\n   */\n  function clear() {\n    dict = [];\n    size = min + 1;\n    for (let i = 0; i < clearCode; i++) {\n      dict[i] = [i];\n    }\n    dict[clearCode] = [];\n    dict[eofCode] = null;\n  }\n\n  /**\n   * 读取指定位数 bit，并转成10进制数字\n   *\n   * @param {number} size\n   * @returns\n   */\n  function readBit(size) {\n    let code = 0;\n    for (let i = 0; i < size; i++) {\n      // arr[pos / 8] & (1 << (pos % 8))\n      if (arr[pos >> 3] & (1 << (pos & 7))) {\n        code |= 1 << i;\n      }\n      pos++;\n    }\n    return code;\n  }\n\n  function decode() {\n    const out = [];\n    let last; // 前缀\n    let code; // 后缀\n    while (1) {\n      last = code;\n      code = readBit(size);\n\n      if (code == clearCode) {\n        // 第一个读到的 code 必然是 clearCode，会初始化数据\n        clear();\n        continue;\n      } else if (code == eofCode) {\n        break;\n      } else if (code < dict.length) {\n        // code 映射已知\n        if (last !== clearCode) {\n          dict.push(dict[last].concat(dict[code][0]));\n        }\n      } else if (code === dict.length) {\n        // code 映射未知\n        dict.push(dict[last].concat(dict[last][0]));\n      } else {\n        throw new Error(\"LZW解析出错\");\n      }\n      out.push.apply(out, dict[code]);\n      if (dict.length === 1 << size && size < 12) {\n        // 取值位数+1\n        size++;\n      }\n    }\n    return out;\n  }\n\n  return {\n    decode: decode\n  };\n};\n","const IMAGE_TYPES_RE = {\n  PNG: /image\\/png/,\n  JPG: /image\\/jpe?g/,\n  GIF: /image\\/gif/\n};\n\n/**\n * 获取图片类型(png, jpg, gif)\n *\n * @export\n * @param {string} type\n * @returns\n */\nexport function getImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    const typeRe = IMAGE_TYPES_RE[typeName];\n    if (typeRe.test(type)) {\n      return typeName;\n    }\n  }\n}\n\n/**\n * 检测图片类型是否可用\n *\n * @export\n * @param {any} type\n * @returns\n */\nexport function checkImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    const typeRe = IMAGE_TYPES_RE[typeName];\n    if (typeRe.test(type)) {\n      return true;\n    }\n  }\n  return false;\n}\n","import GIF from \"gif.js\";\nimport { getImageType } from \"./imageCommon\";\nimport { FONT_HEIGHT, FONT_WIDTH } from \"./constant\";\n\n// pre标签下的字体\nconst TEXT_FONT = `normal normal 400 normal ${FONT_HEIGHT}px / ${FONT_HEIGHT}px monospace, monospace`;\nconst COLOR = {\n  BLACK: \"rgba(0,0,0,1)\",\n  WHITE: \"rgba(255,255,255,1)\"\n};\n\n/**\n * @typedef Frame\n * @prop {ImageData} data\n * @prop {string[]} text\n * @prop {number} delay\n */\n\n/**\n * 获取渲染了单帧图片的 canvas 对象\n *\n * @param {HTMLDivElement} div\n * @param {Frame} frame\n * @param {object} props\n * @returns\n */\nfunction getFrameCanvas(div, frame, props) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = div.scrollWidth;\n  canvas.height = div.scrollHeight;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = props.bgColor;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = props.color;\n  ctx.font = props.font;\n  for (let i = 0; i < frame.length; i++) {\n    for (let j = 0; j < frame[i].length; j++) {\n      ctx.fillText(frame[i][j], j * FONT_WIDTH, i * FONT_HEIGHT);\n    }\n  }\n  return canvas;\n}\n\nconst DEFAULT_GIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n};\n/**\n * 创建gif图片\n *\n * @param {HTMLDivElement} div\n * @param {Frame[]} frames\n * @param {object} props\n * @returns\n */\nfunction gif(div, frames, props, cb) {\n  props = Object.assign({}, DEFAULT_GIF_PROPS, props);\n  const width = div.scrollWidth;\n  const height = div.scrollHeight;\n  const gif = new GIF({\n    quality: 10,\n    workers: 2,\n    workerScript: \"./js/gif.worker.js\",\n    width,\n    height\n  });\n  gif.on(\"finished\", function(blob) {\n    cb(blob);\n  });\n  for (let i = 0; i < frames.length; i++) {\n    const canvas = getFrameCanvas(div, frames[i].text, props);\n    gif.addFrame(canvas, {\n      delay: frames[i].delay\n    });\n  }\n  gif.render();\n}\n\nconst DEFAULT_NOGIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n};\n/**\n * 创建非gif图片(jpg)\n *\n * @param {HTMLDivElement} div\n * @param {Frame} frame\n * @param {object} props\n * @returns\n */\nfunction noGif(div, frame, props) {\n  props = Object.assign({}, DEFAULT_NOGIF_PROPS, props);\n  const canvas = getFrameCanvas(div, frame.text, props);\n  return canvas.toDataURL(\"image/png\");\n}\n\n/**\n * 创建并下载新的图片\n *\n * @export\n * @param {object} option\n * @param {HTMLDivElement} option.div\n * @param {Frame[]} option.frames\n * @param {File} option.file\n */\nexport function createImage(option) {\n  const { div, frames, file, ...props } = option;\n  const type = getImageType(file.type);\n\n  const link = document.createElement(\"a\");\n  let filename = file.name.split(\".\");\n  filename[filename.length - 2] = filename[filename.length - 2] + \"-text\";\n  filename = filename.join(\".\");\n  link.download = filename;\n\n  if (type === \"GIF\") {\n    gif(div, frames, props, function(blob) {\n      const url = URL.createObjectURL(blob);\n      link.href = url;\n      link.click();\n      URL.revokeObjectURL(url);\n    });\n  } else {\n    link.href = noGif(div, frames[0], props);\n    link.click();\n  }\n}\n","import gifParser from \"./gifParser\";\nimport * as datauri from \"./datauri\";\nimport { getImageType } from \"./imageCommon\";\n\n/**\n * 通过缩放比例压缩帧\n *\n * @param {ImageData} frameData\n * @param {HTMLImageElement} image\n */\nfunction scaleFrameData(frameData, image) {\n  // 方法来源：\n  // https://stackoverflow.com/questions/3448347/how-to-scale-an-imagedata-in-html-canvas\n\n  // 存放一帧原图像到canvas中\n  const nartualCanvas = document.createElement(\"canvas\");\n  const nartualCtx = nartualCanvas.getContext(\"2d\");\n  nartualCanvas.width = image.naturalWidth;\n  nartualCanvas.height = image.naturalHeight;\n  nartualCtx.putImageData(frameData, 0, 0);\n\n  // 新建一个canvas，宽高设为目标宽高，并进行画布缩放\n  const scaleCanvas = document.createElement(\"canvas\");\n  const scaleCtx = scaleCanvas.getContext(\"2d\");\n  scaleCanvas.width = image.width;\n  scaleCanvas.height = image.height;\n  const ratio = image.width / image.naturalWidth;\n  scaleCtx.scale(ratio, ratio);\n  // 将保存的原图像使用drawImage绘制到新画布上\n  scaleCtx.drawImage(nartualCanvas, 0, 0);\n\n  return scaleCtx.getImageData(0, 0, image.width, image.height);\n}\n\n/**\n * 获取gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction gif(image) {\n  const data = datauri.decode(image.src);\n  const { width: rawWidth, height: rawHeight, frames } = gifParser(data);\n  const framesData = [];\n  for (let i = 0; i < frames.length; i++) {\n    const frameData = new ImageData(frames[i].data, rawWidth, rawHeight);\n    framesData.push({\n      data: scaleFrameData(frameData, image),\n      delay: frames[i].delay\n    });\n  }\n  return framesData;\n}\n\n/**\n * 获取非gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction noGif(image) {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const ratio = image.width / image.naturalWidth;\n  // 将画布内容缩放到与当前图像一致\n  canvas.width = image.width;\n  canvas.height = image.height;\n  ctx.scale(ratio, ratio);\n  // 绘制当前图像到canvas上\n  ctx.drawImage(image, 0, 0);\n  const imageData = ctx.getImageData(0, 0, image.width, image.height);\n  return [{ data: imageData, delay: null }];\n}\n\n/**\n * 获取图像信息\n *\n * @export\n * @param {HTMLImageElement} image\n * @param {File} file\n * @returns\n */\nexport function getImageDatas(image, file) {\n  const type = getImageType(file.type);\n  if (type === \"GIF\") {\n    return gif(image);\n  } else {\n    return noGif(image);\n  }\n}\n","import { FONT_HEIGHT, FONT_WIDTH, DEFAULT_AVAILABLE_TEXTS } from \"./constant\";\n\n/**\n * 获取rgb颜色的灰度\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns\n */\nfunction rgbToGray(r, g, b) {\n  return (299 * r + 587 * g + 114 * b + 500) / 1000;\n}\n\nexport const MAX_COLOR_PIXELS = 255;\n\n/**\n * 灰度转字符函数生成器\n *\n * @param {string | Array<string>} texts\n * @returns\n */\nexport function createGrayToTextFunc(texts = DEFAULT_AVAILABLE_TEXTS) {\n  const grayGap = MAX_COLOR_PIXELS / texts.length;\n\n  /**\n   * 灰度转字符函数\n   *\n   * @param {number} gray\n   * @returns\n   */\n  function grayToText(gray) {\n    let textIndex = (gray / grayGap) >> 0;\n    if (textIndex >= texts.length) {\n      textIndex = texts.length - 1;\n    }\n    return texts[textIndex];\n  }\n\n  return grayToText;\n}\n\n/**\n * 将图像的一帧转成字符数组\n *\n * @param {ImageData} imageData\n * @param {Function} [grayToText=defaultGrayToText]\n * @returns\n */\nexport function transformImageToText(\n  imageData,\n  grayToText = createGrayToTextFunc()\n) {\n  const dataArr = imageData.data;\n  const width = imageData.width;\n  const height = imageData.height;\n  const lines = [];\n  for (let h = 0; h < height; h += FONT_HEIGHT) {\n    let line = \"\";\n    for (let w = 0; w < width; w += FONT_WIDTH) {\n      const i = (w + width * h) * 4;\n      const gray = rgbToGray(dataArr[i], dataArr[i + 1], dataArr[i + 2]);\n      line += grayToText(gray);\n    }\n    lines.push(line);\n  }\n  return lines;\n}\n","import App from \"@components/image-to-text/App\";\n\nexport default function() {\n  return <App />;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAkBA;AACA;AADA;AAGA;AACA;AAtBA;AAwBA;AACA;AADA;AAGA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AA1CA;AA4CA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjDA;AAwDA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;;;AAGA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAAA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAnFA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAVA;AAWA;AACA;;;AA0EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAxJA;AACA;;;;;;;;;;;;;;;;;;ACjBA;AAEA;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;;;;;AACA;;;;;;;AAOA;;;;;;;;;AASA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AA1CA;AA4CA;AACA;AADA;AAGA;AACA;AAhDA;AAkDA;AACA;AADA;AAGA;AACA;AAtDA;AA+FA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AArGA;AAuGA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA1GA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;;;;AAwCA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAiBA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AArJA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;;;;;;;;;AA5CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAOA;;;;;AACA;;;;;;;;;;;AAWA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2BA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAhCA;AAkCA;AACA;AACA;AApCA;AAsCA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA3CA;AA6CA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AApDA;AAsDA;AACA;AACA;AAxDA;AA0DA;AACA;AAAA;AACA;AACA;AACA;AACA;AA7DA;AACA;AACA;AACA;AAHA;AAMA;;;;AAGA;AACA;AACA;AAbA;AAcA;AAEA;;;;;;;;;;AAMA;AACA;AACA;;;;AAwCA;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAzKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AAEA;;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAfA;AACA;AADA;AAEA;AACA;AAFA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACLA;AAAA;AAAA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;AC7BA;AAAA;AAAA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AACA;AA1CA;AA4CA;AAEA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AAbA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnDA;AAHA;AAwDA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;;;AAGA;AACA;AAAA;;;AAGA;AARA;AAAA;AAHA;AAcA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;;;;;;;;;;;;AC/XA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;AAOA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAMA;AAAA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACnEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}