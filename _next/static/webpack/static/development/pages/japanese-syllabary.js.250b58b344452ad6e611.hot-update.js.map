{"version":3,"file":"static/webpack/static/development/pages/japanese-syllabary.js.250b58b344452ad6e611.hot-update.js","sources":["webpack:///./pages/japanese-syllabary.tsx"],"sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useReducer,\n  useLayoutEffect\n} from \"react\";\nimport { Pane, Tablist, Tab, Paragraph, Text } from \"evergreen-ui\";\nimport WriteCharactorSearch from \"@components/WriteCharactor/WriteCharactorSearch\";\nimport chinese from \"@constants/chinese.json\";\nimport { converttoNoTone } from \"@utils/utils\";\nimport VoiceComponent from \"@components/icons/VoiceComponent\";\nlet time = 0;\nlet reqFrame;\nlet paths = [];\nconst BOARD_CELL_SIZE = 298;\nconst BOARD_SIZE = 3;\nconst PADDING = 2;\nconst LAYOUT_SIZE = 600;\nconst commonWords = ``;\n\nexport default function () {\n  const [char, setChar] = useState(\"\");\n  const [pinyin, setPinyin] = useState(\"\");\n  const [state, setState] = useReducer((state, action) => {\n    return {\n      ...state,\n      ...action\n    }\n  }, {\n      selectedIndex: 0,\n      tabs: ['Hiragana', 'Katakana'],\n      Hiragana: [[\n        [\"あ\", \"い\", \"う\", \"え\", \"お\"],\n        [\"か\", \"き\", \"く\", \"け\", \"こ\"],\n        [\"さ\", \"し\", \"す\", \"せ\", \"そ\"],\n        [\"た\", \"ち\", \"つ\", \"て\", \"と\"],\n        [\"な\", \"に\", \"ぬ\", \"ね\", \"の\"],\n        [\"は\", \"ひ\", \"ふ\", \"へ\", \"ほ\"],\n        [\"ま\", \"み\", \"む\", \"め\", \"も\"],\n        [\"や\", \"ゆ\", \"よ\"],\n        [\"ら\", \"り\", \"る\", \"れ\", \"ろ\"],\n        [\"わ\", \"を\"],\n        [\"ん\"]\n      ],\n      [\n        [\"が\", \"ぎ\", \"ぐ\", \"げ\", \"ご\"],\n        [\"ざ\", \"じ\", \"ず\", \"ぜ\", \"ぞ\"],\n        [\"だ\", \"ぢ\", \"づ\", \"で\", \"ど\"],\n        [\"ば\", \"び\", \"ぶ\", \"べ\", \"ぼ\"],\n        [\"ぱ\", \"ぴ\", \"ぷ\", \"ぺ\", \"ぽ\"],\n        [\"きゃ\", \"きゅ\", \"きょ\"],\n        [\"しゃ\", \"しゅ\", \"しょ\"],\n        [\"ちゃ\", \"ちゅ\", \"ちょ\"],\n        [\"にゃ\", \"にゅ\", \"にょ\"],\n        [\"ひゃ\", \"ひゅ\", \"ひょ\"],\n        [\"みゃ\", \"みゅ\", \"みょ\"],\n        [\"りゃ\", \"りゅ\", \"りょ\"],\n        [\"ぎゃ\", \"ぎゅ\", \"ぎょ\"],\n        [\"じゃ\", \"じゅ\", \"じょ\"],\n        [\"びゃ\", \"びゅ\", \"びょ\"],\n        [\"ぴゃ\", \"ぴゅ\", \"ぴょ\"]\n      ]\n      ],\n      Katakana: [[\n        [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\"],\n        [\"カ\", \"キ\", \"ク\", \"ケ\", \"コ\"],\n        [\"サ\", \"シ\", \"ス\", \"セ\", \"ソ\"],\n        [\"タ\", \"チ\", \"ツ\", \"テ\", \"ト\"],\n        [\"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\"],\n        [\"ハ\", \"ヒ\", \"フ\", \"ヘ\", \"ホ\"],\n        [\"マ\", \"ミ\", \"ム\", \"メ\", \"モ\"],\n        [\"ヤ\", \"ユ\", \"ヨ\"],\n        [\"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\"],\n        [\"ワ\", \"ヲ\"],\n        [\"ン\"],\n      ],\n      [\n        [\"ガ\", \"ギ\", \"グ\", \"ゲ\", \"ゴ\"],\n        [\"ザ\", \"ジ\", \"ズ\", \"ゼ\", \"ゾ\"],\n        [\"ダ\", \"ヂ\", \"ヅ\", \"デ\", \"ド\"],\n        [\"バ\", \"ビ\", \"ブ\", \"ベ\", \"ボ\"],\n        [\"パ\", \"ピ\", \"プ\", \"ペ\", \"ポ\"],\n        [\"キャ\", \"キュ\", \"キョ\"],\n        [\"シャ\", \"シュ\", \"ショ\"],\n        [\"チャ\", \"チュ\", \"チョ\"],\n        [\"ニャ\", \"ニュ\", \"ニョ\"],\n        [\"ヒャ\", \"ヒュ\", \"ヒョ\"],\n        [\"ミャ\", \"ミュ\", \"ミョ\"],\n        [\"リャ\", \"リュ\", \"リョ\"],\n        [\"ギャ\", \"ギュ\", \"ギョ\"],\n        [\"ジャ\", \"ジュ\", \"ジョ\"],\n        [\"ビャ\", \"ビュ\", \"ビョ\"],\n        [\"ピャ\", \"ピュ\", \"ピョ\"]\n      ]\n      ]\n    })\n  const onSearch = slug => {\n    if (char && slug == char) {\n      location.reload();\n    }\n    cancelAnimationFrame(reqFrame);\n    paths = [];\n\n    if (slug) {\n      slug = slug.slice(0, 1);\n      if (chinese[slug]) {\n        paths = JSON.parse(JSON.stringify(chinese[slug]));\n        location.hash = \"#/\" + slug;\n        setChar(slug);\n      }\n    } else {\n      paths = [];\n      if (window.history.pushState) {\n        window.history.pushState(\"\", \"/\", window.location.pathname);\n      } else {\n        window.location.hash = \"\";\n      }\n      setChar(\"\");\n    }\n  };\n\n  const toTop = () => {\n    try {\n      // trying to use new API - https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\"\n      });\n    } catch (error) {\n      // just a fallback for older browsers\n      window.scrollTo(0, 0);\n    }\n  };\n  const draw = startTime => {\n    if (!__CLIENT__) {\n      return;\n    }\n    var canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 4;\n    //画田字格\n    var drawBoard = function () {\n      ctx.setLineDash([]);\n      ctx.strokeStyle = \"red\"; // red\n      for (var i = 0; i < BOARD_SIZE; i++) {\n        ctx.beginPath();\n        ctx.moveTo(PADDING + i * BOARD_CELL_SIZE, PADDING);\n        ctx.lineTo(\n          PADDING + i * BOARD_CELL_SIZE,\n          BOARD_CELL_SIZE * BOARD_SIZE - PADDING\n        );\n        ctx.stroke();\n        ctx.moveTo(PADDING, PADDING + i * BOARD_CELL_SIZE);\n        ctx.lineTo(\n          BOARD_CELL_SIZE * BOARD_SIZE - PADDING,\n          PADDING + i * BOARD_CELL_SIZE\n        );\n        ctx.stroke();\n      }\n\n      // X\n      ctx.beginPath();\n      ctx.setLineDash([5, 15]);\n      ctx.moveTo(0, 0);\n      ctx.lineTo(600, 600);\n      ctx.stroke();\n      // X\n      ctx.beginPath();\n      ctx.setLineDash([5, 15]);\n      ctx.moveTo(600, 0);\n      ctx.lineTo(0, 600);\n      ctx.stroke();\n\n      ctx.closePath();\n    };\n    drawBoard();\n    const drawWord = thepaths => {\n      if (startTime !== time) {\n        return;\n      }\n      var vertices = [];\n      if (thepaths.length > 0) {\n        vertices = thepaths.shift();\n      } else {\n        return;\n      }\n      // calculate incremental points along the path\n      var points = calcWaypoints(vertices);\n      // extend the line from start to finish with animation\n      // calc waypoints traveling along vertices\n      function calcWaypoints(vertices) {\n        var waypoints = [];\n        var fps = 50;\n        var len = vertices.length;\n        if (len > 3) {\n          fps = 40;\n        }\n        for (var i = 1; i < len; i++) {\n          var pt0 = vertices[i - 1];\n          var pt1 = vertices[i];\n          var dx = pt1[0] - pt0[0];\n          var dy = pt1[1] - pt0[1];\n          for (var j = 0; j < fps; j++) {\n            var x = pt0[0] + (dx * j) / fps;\n            var y = pt0[1] + (dy * j) / fps;\n            waypoints.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n        return waypoints;\n      }\n      var t = 1;\n      function animate() {\n        if (startTime !== time) {\n          cancelAnimationFrame(reqFrame);\n          return;\n        }\n        ctx.lineCap = \"round\";\n        ctx.lineWidth = 15;\n        ctx.strokeStyle = \"#000\";\n        ctx.beginPath();\n        ctx.moveTo(points[t - 1].x, points[t - 1].y);\n        ctx.lineTo(points[t].x, points[t].y);\n        ctx.stroke();\n\n        if (t < points.length - 1) {\n          reqFrame = requestAnimationFrame(animate);\n        } else {\n          drawWord(thepaths);\n        }\n        t++;\n      }\n      animate();\n    };\n    if (char && paths && paths.length) {\n      drawWord(paths);\n    }\n  };\n  let audioRef = React.createRef() as any;\n  useEffect(() => {\n    time = new Date().getTime();\n    draw(time);\n\n    try {\n      if (!char) return;\n      let py = transPinyin(char);\n      setPinyin(py);\n      let tone = converttoNoTone(py).trim();\n      let t = `https://raw.githubusercontent.com/icai/tts-chinese/master/dist/${tone}.mp3`;\n      var n = audioRef;\n      n.setAttribute(\"datasrc\", t);\n    } catch (e) { }\n  }, [char]);\n\n  useEffect(() => {\n    let path = decodeURIComponent(location.hash.slice(2));\n    onSearch(path);\n  }, []);\n\n  const onVoiceHover = () => {\n    var n = audioRef;\n    n.src = n.getAttribute(\"datasrc\");\n  };\n\n  const onVoiceClick = () => {\n    var n = audioRef;\n    n.loop = false;\n    n.play();\n  };\n\n  return (\n    <Pane width=\"800px\" height=\"100%\" margin=\"auto\">\n      <WriteCharactorSearch\n        char={char}\n        onSearch={onSearch}\n      ></WriteCharactorSearch>\n      <Pane\n        className=\"clearfix\"\n        width={\"600px\"}\n        margin={\"auto\"}\n        paddingTop={50}\n      >\n        <canvas id=\"canvas\" width={LAYOUT_SIZE} height={LAYOUT_SIZE}></canvas>\n      </Pane>\n      <Pane lineHeight=\"32px\" fontSize=\"18px\">\n        拼 音: {pinyin}{\" \"}\n        <VoiceComponent\n          style={{ verticalAlign: \"middle\", cursor: \"pointer\" }}\n          onMouseEnter={onVoiceHover}\n          onClick={onVoiceClick}\n        ></VoiceComponent>\n      </Pane>\n      <div className=\"text-right\">\n        <a\n          href=\"https://github.com/w3cub/w3cubtools-md/issues\"\n          target=\"_blank\"\n          className=\"word\"\n        >\n          Report an error\n          </a>\n      </div>\n      \n      <Pane>\n        <Pane >\n          <Tablist marginBottom={16} flexBasis={240} textAlign={'right'} marginRight={24}>\n            {state.tabs.map((tab, index) => (\n              <Tab\n                key={tab}\n                id={tab}\n                onSelect={() => setState({ selectedIndex: index })}\n                isSelected={index === state.selectedIndex}\n                aria-controls={`panel-${tab}`}\n              >\n                <h3>{tab}</h3>\n              </Tab>\n            ))}\n          </Tablist>\n          <Pane padding={16} background=\"#fff\" flex=\"1\">\n            {state.tabs.map((tab, index) => (\n              <Pane\n                key={tab}\n                id={`panel-${tab}`}\n                role=\"tabpanel\"\n                aria-labelledby={tab}\n                aria-hidden={index !== state.selectedIndex}\n                display={index === state.selectedIndex ? 'block' : 'none'}\n              >\n                <Pane display=\"flex\" alignItems=\"flex-start\" >\n                {state[tab].map((col, ix) => (\n                  <Pane\n                    key={ix}\n                    flex=\"1 1 50%\"\n                    flexWrap=\"wrap\"\n                    display=\"flex\"\n                    padding={10}\n                    marginX={10}\n                    alignItems=\"flex-start\"\n                    justifyContent=\"center\"\n                  >\n                    {col.map((line, li) => (\n                      <Pane\n                        key={li}\n                        flex=\"1 1 100%\"\n                        display=\"flex\"\n                        alignItems=\"flex-start\"\n                        justifyContent=\"space-between\"\n                      >\n                        {\n                          line.map((word, wi) => (\n                            <Pane\n                              key={wi}\n                              margin={5}\n                              display=\"flex\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                              padding={10}\n                              height={70}\n                              width={54}\n                              style={{ border: '1px solid #69BF61', borderRadius: '5px'}}\n                            >\n                              {word}\n                            </Pane>\n                          ))\n                        }\n                      </Pane>\n                    ))}\n                  </Pane>\n                ))}\n                </Pane>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n        {commonWords.split(\"\").map(word => {\n          return (\n            <a\n              href=\"javascript:;\"\n              className=\"word\"\n              key={word}\n              onClick={() => {\n                toTop();\n                setTimeout(() => {\n                  onSearch(word);\n                }, 500);\n              }}\n            >\n              {word}\n            </a>\n          );\n        })}\n      </Pane>\n      <div style={{ display: \"none\" }}>\n        <audio\n          id=\"audio\"\n          ref={input => {\n            audioRef = input;\n          }}\n        ></audio>\n      </div>\n\n      <style jsx>{`\n          .word {\n            margin-right: 20px;\n            line-height: 25px;\n            color: #000;\n          }\n        `}</style>\n    </Pane>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAIA;AACA;AACA;AACA;AAgCA;AAnCA;AARA;AAAA;AAAA;AACA;AA2EA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,iwDA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzHA;AAAA;AAAA;AA0IA;;;;A","sourceRoot":""}