{"version":3,"file":"static/webpack/static/development/pages/vue-to-react.js.592f45ce6fa52d20462c.hot-update.js","sources":["webpack:///./pages/vue-to-react.tsx"],"sourcesContent":["import ConversionPanel from \"@components/ConversionPanel\";\nimport { EditorPanelProps } from \"@components/EditorPanel\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport { useCallback, useState } from \"react\";\nimport * as React from \"react\";\ninterface Settings {\n  auto: boolean;\n  sfc: boolean;\n}\n\nconst formFields = [\n  {\n    type: InputType.SWITCH,\n    key: \"auto\",\n    label: \"Auto detect Single File Components\"\n  },\n  {\n    type: InputType.SWITCH,\n    key: \"sfc\",\n    label: \"Is Single File Components\"\n  }\n];\nconst defValue = `\n<template>\\n    <div class=\\\"wrap\\\">\\n         <div>time: {{time}}</div>\\n         <p v-if=\\\"error\\\">some error happend</p>\\n         <p v-else class=\\\"name\\\">your msg: {{msg}}</p>\\n         <p v-show=\\\"msg\\\" class=\\\"shown\\\">test v-show</p>\\n         <p v-on:click=\\\"clickMethod\\\">test v-on</p>\\n         <img v-bind:src=\\\"imageSrc\\\" />\\n         <ul class=\\\"test-list\\\">\\n             <li v-for=\\\"(value, index) in list\\\" v-bind:key=\\\"index\\\" class=\\\"list-item\\\">\\n                 <div>{{value}}</div>\\n                 <span>{{msg}}</span>\\n             </li>\\n         </ul>\\n         <span v-text=\\\"text\\\"></span>\\n         <div v-html=\\\"html\\\"></div>\\n         <to-do v-bind:msg=\\\"msg\\\" v-bind:list=\\\"list\\\"></to-do>\\n         {{msg}}\\n    </div>\\n</template>\\n\\n<script>\\n    import \\'./your.less\\';\\n    import ToDo from \\'./todo\\';\\n    export default {\\n        name: \\'test-sfc\\',\\n        props: {\\n            msg: {\\n                type: String,\\n                default: \\'hello, sfc\\'\\n            },\\n            imageSrc: String\\n        },\\n\\n        data () {\\n            const now = Date.now();\\n            return {\\n                list: [1, 2, 3],\\n                html: \\'<div>1111<span>222</span>333<p>ssssss</p></div>\\',\\n                error: false,\\n                time: now\\n            }\\n        },\\n\\n        computed: {\\n            text () {\\n                console.log(\\'from computed\\', this.msg);\\n                return \\`\\$\\{this.time\\}: \\$\\{this.html\\}\\`;\\n            }\\n        },\\n\\n        components: {\\n            ToDo\\n        },\\n\\n        methods: {\\n            clickMethod () {\\n                console.log(\\'click method\\');\\n            },\\n\\n            testMethod () {\\n                console.log(\\'call test\\');\\n            }\\n        },\\n\\n        created () {\\n            const prevTime = this.time;\\n            this.testMethod();\\n            const msg = \\'this is a test msg\\';\\n            this.time = Date.now();\\n            console.log(\\'mounted\\', msg, this.time);\\n        },\\n\\n        errorCaptured () {\\n            this.error = true;\\n            this.time = Date.now();\\n            console.log(\\'errorCaptured\\', this.time);\\n        }\\n    }\\n</script>\n\n`\nexport default function() {\n  const name = \"Vue to React\";\n  const [settings, setSettings] = useSettings(name, {\n    auto: true,\n    sfc: false\n  });\n  const transformer = useCallback(\n    async ({ value }) => {\n      if (value) {\n        if (settings.auto) {\n          if (/\\<(script|template)\\>/g.test(value)) {\n            return _w3cub_vueToReact(value, true);\n          } else {\n            return _w3cub_vueToReact(value, false);\n          }\n        } else {\n          return _w3cub_vueToReact(value, settings.sfc);\n        }\n      }\n      return value;\n    },\n    [settings]\n  );\n  const getSettingsElement = useCallback<EditorPanelProps[\"settingElement\"]>(\n    ({ open, toggle }) => {\n      return (\n        <Form<Settings>\n          title=\"Vue to React\"\n          onSubmit={setSettings}\n          open={open}\n          toggle={toggle}\n          formsFields={formFields}\n          initialValues={settings}\n        />\n      );\n    },\n    []\n  );\n  return (\n    <ConversionPanel\n      layoutHeight=\"700px\"\n      transformer={transformer}\n      editorTitle=\"Vue\"\n      editorLanguage=\"html\"\n      editorDefaultValue={defValue}\n      editorSettingsElement={getSettingsElement}\n      settings={settings}\n      resultTitle=\"React\"\n      resultLanguage={\"javascript\"}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAIA;AACA;AACA;AAFA;AAGA;AACA;AAFA;AAFA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;A","sourceRoot":""}