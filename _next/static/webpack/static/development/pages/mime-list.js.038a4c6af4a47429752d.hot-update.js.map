{"version":3,"file":"static/webpack/static/development/pages/mime-list.js.038a4c6af4a47429752d.hot-update.js","sources":["webpack:///./pages/mime-list.tsx","webpack:///./utils/fuzzyScore.ts"],"sourcesContent":["import mimes from \"@constants/mime.json\";\nimport Mdloader from \"@components/Mdloader\";\n// @ts-ignore\nimport { SearchInput, Pane, toaster } from \"evergreen-ui\";\nimport { useState, useEffect } from \"react\";\nimport { createFuzzyList } from \"@utils/fuzzyScore\";\nlet lists = [];\nif (__CLIENT__) {\n  lists = createFuzzyList(mimes);\n} else {\n  lists = mimes;\n}\nexport default function() {\n  const [query, setQuery] = useState(\"\");\n  const [data, setData] = useState(lists);\n  useEffect(() => {\n    let sorted = [];\n    if (query) {\n      sorted = lists\n        .filter(function(item) {\n          return (item._cachedScore = item.score(query)) >= 0.5;\n        })\n        .sort(function(a, b) {\n          var as = a._cachedScore;\n          var bs = b._cachedScore;\n          return as > bs ? -1 : as == bs && a.i < b.i ? -1 : 1;\n        })\n        .slice(0, 20);\n    } else {\n      sorted = lists;\n    }\n    setData(sorted);\n  }, [query]);\n  var copyCode = function(item) {\n    function dynamicNode() {\n      var node = document.createElement(\"pre\");\n      node.style.position = \"fixed\";\n      node.style.fontSize = \"0px\";\n      node.textContent = \".\" + item[0] + \" \" + item[1];\n      return node;\n    }\n    var node = dynamicNode();\n    document.body.appendChild(node);\n    var selection = getSelection();\n    selection.removeAllRanges();\n    var range = document.createRange();\n    range.selectNodeContents(node);\n    selection.addRange(range);\n    document.execCommand(\"copy\");\n    selection.removeAllRanges();\n    document.body.removeChild(node);\n    toaster.success(\"Code Copied! 👍\", {\n      duration: 2\n    });\n  };\n  return (\n    <Pane margin=\"auto\" width=\"800px\">\n      <SearchInput\n        placeholder=\"Typing something\"\n        onChange={e => {\n          setQuery(e.target.value);\n        }}\n        value={query}\n        width={\"600px\"}\n        margin={\"auto\"}\n        marginY=\"100px\"\n        marginBottom=\"150px\"\n        display=\"block\"\n        height={80}\n      />\n      <table className=\"mimes\">\n        <tbody>\n          <tr>\n            <th className=\"separateColor\" style={{ width: \"30%\" }}>\n              Extension\n            </th>\n            <th>Content-Type(Mime-Type)</th>\n          </tr>\n          {data.map((item, ix) => {\n            return (\n              <tr\n                key={ix}\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  copyCode(item);\n                }}\n              >\n                <td>{item[0]}</td>\n                <td>\n                  <code>{item[1]}</code>\n                </td>\n              </tr>\n            );\n          })}\n          {!data.length && (\n            <tr>\n              <td colSpan={2} style={{ fontSize: \"30px\", padding: \"100px\" }}>\n                No Results\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <style jsx>{`\n        .mimes {\n          font: 1em Monaco;\n          text-align: center;\n          border: 1px solid #ccc;\n          border-collapse: collapse;\n          border-spacing: 0;\n          width: 100%;\n        }\n        .mimes tr > th,\n        .mimes tr > td {\n          border: 1px solid #ddd;\n          padding: 8px;\n          line-height: 1.428571429;\n          vertical-align: top;\n          border-top: 1px solid #ddd;\n        }\n        .mimes tr > th {\n          border-bottom-width: 2px;\n          padding: 12px 8px;\n        }\n\n        .mimes tr:nth-of-type(odd) {\n          background-color: #f9f9f9;\n        }\n\n        .mimes tr:hover td {\n          background-color: #f5f5f5;\n        }\n      `}</style>\n    </Pane>\n  );\n}\n","export function createFuzzyScorer(text) {\n  var matcher = makeFuzzyRegex(text);\n  return function(query) {\n    var match = matcher.exec(query);\n\n    if (!match) return 0;\n\n    var captures = match.slice(1);\n    var score = 0;\n\n    for (var i = 0, l = captures.length; i < l; i += 3) {\n      var relevancyOfCharacter = Math.pow(i + 1, -2);\n      if (captures[i]) score -= relevancyOfCharacter * 0.1;\n      if (captures[i + 1]) score += relevancyOfCharacter * 1;\n      if (captures[i + 2]) score -= relevancyOfCharacter * 0.1;\n    }\n\n    return score;\n  };\n\n  function makeFuzzyRegex(string) {\n    if (!string) {\n      return /^$/;\n    }\n\n    // Escape any potential special characters:\n    var cleansed = string.replace(/\\W/g, \"\\\\$&\");\n\n    return RegExp(\n      \"^\" +\n        cleansed.replace(\n          // Find every escaped and non-escaped char:\n          /(\\\\?.)/g,\n          // Replace with fuzzy character matcher:\n          \"(?:(^.)?($1)(.??))?\"\n        ) +\n        \"$\",\n      \"i\"\n    );\n  }\n}\n\nexport const createFuzzyList = data => {\n  return data.map(function(aliases, index) {\n    var scorers = [];\n\n    for (var i = 0; i < aliases.length; i++) {\n      var alias = aliases[i];\n      if (/[\\s-_,()]+/.test(alias)) {\n        // Split words into seperate aliases\n        [].push.apply(aliases, alias.split(/[\\s-_,()]+/));\n      }\n      scorers.push(createFuzzyScorer(alias));\n    }\n    function score(query) {\n      var s = 0;\n      for (var i = 0, l = scorers.length; i < l; i++) {\n        s = Math.max(s, scorers[i](query));\n      }\n      return s;\n    }\n    return {\n      score: score,\n      _i: index,\n      ...aliases,\n      toString: function() {\n        return aliases[1];\n      }\n    };\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA,SAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxCA;AAAA;AAAA;AA+EA;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AANA;AAQA;AACA;;;;A","sourceRoot":""}